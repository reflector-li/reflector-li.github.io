{"meta":{"title":"LinkX的技术站","subtitle":"","description":"程序、自动驾驶技术和人生感悟的记录","author":"LinkX","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2024-03-05T12:44:20.000Z","updated":"2024-03-05T12:44:55.458Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-03-08T16:16:28.119Z","updated":"2024-03-08T16:16:28.119Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Biography 我是LinkX，目前是一名自动驾驶算法工程师。 我硕士毕业于上海交通大学自动化系，研究内容为自动驾驶决策规划技术。建立本站的目的一方面是记录和分享自己的技术积累，另一方面也督促自己学习，更新技术栈。下一步的研究目标为时空联合规划和端到端自动驾驶。 Education 上海交通大学 自动化专业 硕士 2021.09~2024.03 上海交通大学 自动化专业 学士 2017.09~2021.07 Projects EM Planner精简复现：该项目为 EM Planner 算法的核心实现，在考虑障碍物情况下， 算法通过优化方式规划出最优路径，辅助车辆进行跟踪。 main 分支通过 matplot-cpp进行简易可视化； foxglove-visualizaion 分支通过 foxglove 将行驶过程可视化； RRT*-RS：在非结构化场景下，利用 Reed-Shepp 曲线连接采样点，结合 RRT*算法规划泊车路径。 Skills 程序语言：C++，Python； 路径规划算法：Dijkstra，D*，Hybrid A *，RRT * ，Open Planner，Lattice Planner，EM Planner； 决策技术：有限状态机，行为树； 控制算法：PID，Stanley，LQR，MPC； 自动驾驶开发工具：ROS，Carla，Gazebo，Foxglove，Git，Docker等；"},{"title":"Tags","date":"2014-12-22T04:39:04.000Z","updated":"2024-03-05T12:42:57.472Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-03-08T07:05:16.110Z","updated":"2024-03-08T07:05:16.110Z","comments":true,"path":"life/index.html","permalink":"http://example.com/life/index.html","excerpt":"","text":"AnnGift @import url(css/page1.css); /*这里是通过@import引用CSS的样式内容*/ How long have you met each other? 37 days 38 days"},{"title":"","date":"2024-03-08T07:03:40.221Z","updated":"2024-03-08T07:03:40.221Z","comments":true,"path":"life/assets/fire.html","permalink":"http://example.com/life/assets/fire.html","excerpt":"","text":"body { margin: 0; padding: 0; overflow: hidden; } .city { width: 100%; position: fixed; bottom: 0px; z-index: 100; } .city img { width: 100%; } FireworksForAnn 浏览器不支持canvas 安安 生日快乐 var canvas = document.getElementById(\"cas\"); var ocas = document.createElement(\"canvas\"); var octx = ocas.getContext(\"2d\"); var ctx = canvas.getContext(\"2d\"); ocas.width = canvas.width = window.innerWidth; ocas.height = canvas.height = 700; var bigbooms = []; window.onload = function () { initAnimate(); }; function initAnimate() { drawBg(); lastTime = new Date(); animate(); } var lastTime; function animate() { ctx.save(); ctx.fillStyle = \"rgba(0,5,24,0.1)\"; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.restore(); var newTime = new Date(); if (newTime - lastTime > 500 + (window.innerHeight - 767) / 2) { var random = Math.random() * 100 > 2 ? true : false; var x = getRandom(canvas.width / 5, (canvas.width * 4) / 5); var y = getRandom(50, 200); if (random) { var bigboom = new Boom( getRandom(canvas.width / 3, (canvas.width * 2) / 3), 2, \"#FFF\", { x: x, y: y } ); bigbooms.push(bigboom); } else { var bigboom = new Boom( getRandom(canvas.width / 3, (canvas.width * 2) / 3), 2, \"#FFF\", { x: canvas.width / 2, y: 200 }, document.querySelectorAll(\".shape\")[ parseInt( getRandom(0, document.querySelectorAll(\".shape\").length) ) ] ); bigbooms.push(bigboom); } lastTime = newTime; console.log(bigbooms); } stars.foreach(function () { this.paint(); }); drawMoon(); bigbooms.foreach(function (index) { var that = this; if (!this.dead) { this._move(); this._drawLight(); } else { this.booms.foreach(function (index) { if (!this.dead) { this.moveTo(index); } else if (index === that.booms.length - 1) { bigbooms[bigbooms.indexOf(that)] = null; } }); } }); raf(animate); } function drawMoon() { var moon = document.getElementById(\"moon\"); var centerX = canvas.width - 200, centerY = 100, width = 80; if (moon.complete) { ctx.drawImage(moon, centerX, centerY, width, width); } else { moon.onload = function () { ctx.drawImage(moon, centerX, centerY, width, width); }; } var index = 0; for (var i = 0; i < 10; i++) { ctx.save(); ctx.beginPath(); ctx.arc( centerX + width / 2, centerY + width / 2, width / 2 + index, 0, 2 * Math.PI ); ctx.fillStyle = \"rgba(240,219,120,0.005)\"; index += 2; ctx.fill(); ctx.restore(); } } Array.prototype.foreach = function (callback) { for (var i = 0; i < this.length; i++) { if (this[i] !== null) callback.apply(this[i], [i]); } }; var raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) { window.setTimeout(callback, 1000 / 60); }; canvas.onclick = function () { var x = event.clientX; var y = event.clientY; var bigboom = new Boom( getRandom(canvas.width / 3, (canvas.width * 2) / 3), 2, \"#FFF\", { x: x, y: y } ); bigbooms.push(bigboom); }; // canvas.addEventLisener(\"touchstart\" , function(event){ // var touch = event.targetTouches[0]; // var x = event.pageX; // var y = event.pageY; // var bigboom = new Boom(getRandom(canvas.width/3,canvas.width*2/3) ,2,\"#FFF\" , {x:x , y:y}); // bigbooms.push(bigboom) // }) var Boom = function (x, r, c, boomArea, shape) { this.booms = []; this.x = x; this.y = canvas.height + r; this.r = r; this.c = c; this.shape = shape || false; this.boomArea = boomArea; this.theta = 0; this.dead = false; this.ba = parseInt(getRandom(80, 200)); }; Boom.prototype = { _paint: function () { ctx.save(); ctx.beginPath(); ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI); ctx.fillStyle = this.c; ctx.fill(); ctx.restore(); }, _move: function () { var dx = this.boomArea.x - this.x, dy = this.boomArea.y - this.y; this.x = this.x + dx * 0.01; this.y = this.y + dy * 0.01; if (Math.abs(dx)"},{"title":"","date":"2024-03-08T07:03:46.185Z","updated":"2024-03-08T07:03:46.185Z","comments":true,"path":"life/assets/giftCard.html","permalink":"http://example.com/life/assets/giftCard.html","excerpt":"","text":"AnnGiftCard @import url(../css/giftCard.css); Ann Happy Birthday 关于太阳花的记忆 风暴曾送来她的花瓣， 鸟儿也传达过她的叹息 浓雾渐起，太阳隐匿 那是北国的太阳花， 曾尽受阳光的宠浴 如今在雨里，他们相互偎依 相隔太近，千里之外仍有花的问语 相隔太远，百步之内却又无法触及 关于太阳花的记忆 热烈，温暖和惋惜 太阳终将升起 海鸟终有归期 或是一个清夜 皓月当空 烟花旖旎 最后，看场烟花吧"},{"title":"","date":"2024-03-08T07:03:58.451Z","updated":"2024-03-08T07:03:58.451Z","comments":true,"path":"life/assets/page3.html","permalink":"http://example.com/life/assets/page3.html","excerpt":"","text":"AnnGift @import url(../css/page3.css); What do you think of him? Outstanding Very Outstanding"},{"title":"","date":"2024-03-08T07:03:51.728Z","updated":"2024-03-08T07:03:51.728Z","comments":true,"path":"life/assets/page2.html","permalink":"http://example.com/life/assets/page2.html","excerpt":"","text":"AnnGift @import url(../css/page2.css); How many movies have you seen together? 3 movies 4 movies"},{"title":"","date":"2024-03-08T07:04:04.990Z","updated":"2024-03-08T07:04:04.990Z","comments":true,"path":"life/assets/page4.html","permalink":"http://example.com/life/assets/page4.html","excerpt":"","text":"AnnGift @import url(../css/page4.css); Do you like him? Yes"},{"title":"","date":"2024-02-15T08:54:26.473Z","updated":"2024-02-15T08:54:26.473Z","comments":true,"path":"life/css/giftCard.css","permalink":"http://example.com/life/css/giftCard.css","excerpt":"","text":"@font-face { font-family: \"myFonts\"; /*字体名称*/ src: url(\"../fonts/FZZJ-FYJW.TTF\"); /*字体文件地址*/ } * { margin: 0; padding: 0; user-select: none; } .container { width: 100vw; height: 100vh; scroll-snap-type: y mandatory; overflow-y: scroll; } .frame { scroll-snap-align: start; width: 100vw; height: 100vh; } .frame:nth-child(1) { display: flex; justify-content: space-evenly; perspective: 1000px; background-blend-mode: multiply; background-color: rgba(0, 0, 0, 0.1); background-image: url(../img/back.png); background-size: cover; } .frame:nth-child(2) { display: flex; justify-content: center; align-items: center; min-height: 100vh; background-blend-mode: multiply; background-color: rgba(0, 0, 0, 0.1); background-image: url(../img/back2.png); background-size: cover; } .cardFrame { width: 300px; height: 400px; margin-top: 2%; /* position: absolute; */ } .card { width: 300px; height: 400px; background-color: #000; display: flex; justify-content: center; transform-style: preserve-3d; background-size: cover; transition: 1.5s; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); background-blend-mode: multiply; background-color: rgba(0, 0, 0, 0.1); } .card:hover { box-shadow: -10px 10px 10px rgba(0, 0, 0, 0.5); } .cardFrame:nth-child(1) .card { background-image: url(\"../img/Ann1.jpg\"); } .cardFrame:nth-child(2) .card { background-image: url(\"../img/Ann2.jpg\"); } .cardFrame:nth-child(3) .card { background-image: url(\"../img/Ann3.jpg\"); } .cardFrame:nth-child(1):hover .card { transform: rotateY(180deg); background-image: url(\"../img/Ann4.jpg\"); } .cardFrame:nth-child(2):hover .card { transform: rotateY(180deg); background-image: url(\"../img/Ann5.jpg\"); } .cardFrame:nth-child(3):hover .card { transform: rotateY(180deg); background-image: url(\"../img/Ann6.jpg\"); } .wordA, .wordB { position: absolute; color: rgba(255, 255, 255, 0.8); font: 900 55px \"\"; /* 设置字体间距 */ letter-spacing: 5px; line-height: 400px; } .wordA { transform: translateZ(70px); } .wordB { transform: translateZ(-70px) rotateY(180deg); } .cardB { position: relative; width: 500px; height: 600px; /* background: #fff; */ background-blend-mode: multiply; background: rgba(0, 0, 0, 0.1); background-image: url(../img/background3-1.png); background-size: cover; transform-style: preserve-3d; transform: perspective(1000px); box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.25); transition: 1s; } .cardB:hover { transform: translateX(50%); } .cardB .imgBox { position: relative; width: 100%; height: 100%; z-index: 1; transform-origin: left; transform-style: preserve-3d; background: #000; transition: 1s; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.25); } .cardB:hover .imgBox { transform: rotateY(-180deg); } .cardB .imgBox img { position: absolute; left: 0; top: 0; width: 100%; height: 100%; object-fit: cover; transform-style: preserve-3d; backface-visibility: hidden; } .cardB .imgBox img:nth-child(2) { transform: rotateY(-180deg); } .cardB .details { position: absolute; top: 0; left: 0; width: 100%; height: 100%; padding: 20px; /* align-items: center; */ } .cardB .details .content { /* display: flex; */ display: flex; justify-content: center; /* justify-content: center; */ /* width: 100%; height: 100%; */ font-family: \"myFonts\"; align-items: center; /* flex-direction: column; */ } .cardB .details .content h2 { text-align: center; /* font-weight: 700; */ /* left: 40%; */ font-size: 30px; } .cardB .details .content p { /* top: 40%; */ margin: 20px; /* text-align: center; */ /* font-weight: 700; */ line-height: 1em; font-size: 22px; } .cardB .details .newButton { /* display: flex; */ width: 18%; left: 13%; bottom: 30%; color: #000; font-size: 20px; border: #677d6b solid 4px; text-align: center; position: absolute; /* bottom: 10%; margin: 50px; right: 10%; */ } .cardB .details .newButton:hover { border: #dd8c30 solid 4px; } a { font-family: \"myFonts\"; color: #000; text-decoration: none; }"},{"title":"","date":"2024-02-15T08:54:26.473Z","updated":"2024-02-15T08:54:26.473Z","comments":true,"path":"life/css/page1.css","permalink":"http://example.com/life/css/page1.css","excerpt":"","text":"* { padding: 0; margin: 0; font-family: Cambria; user-select: none; } body { background-color: rgb(255, 255, 255); } .shell { width: 100%; height: 100%; background-color: rgb(255, 255, 255); overflow: hidden; /* 内部元素超出本容器后直接隐藏 */ } .page { /*transform: translateY(-110%); /*让元素移出可视画面*/ position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 100%; /*相对父元素百分比*/ height: 40%; background-color: #849da4; } .pageImage { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 80%; /*相对父元素百分比*/ height: 75%; bottom: 15px; left: 10%; background: url(\"../img/page1.png\"); /*filter: brightness(80%);*/ background-size: cover; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); } .pageImage h1 { font-size: 75px; text-align: center; color: azure; margin-top: -10%; animation: imEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } @keyframes imEffect { 0% { /* % 表示执行时间，0%表示开始 */ opacity: 0; } 50% { opacity: 0.5; transform: translateY(-50px); } 100% { /* 100%表示结束 */ opacity: 1; transform: translateY(0px); } } .container { animation-name: buttonEffect; animation-duration: 3s; animation-iteration-count: 1; /* 播放几次动画*/ } .newButton { display: block; /*显示模式，有inline和block，block是块状，内部可以添加其他元素，是个容器*/ width: 20%; color: #fff; font-size: 40px; border-bottom: #fff solid 4px; text-align: center; position: absolute; top: 20%; margin: 50px; left: calc(20% + (var(--i) * 40%)); z-index: 999; /*元素堆叠顺序，越大越能显示在上面*/ /*元素过渡时间，下面应该会有这个元素的变化*/ } @keyframes buttonEffect { 0% { opacity: 0; } 50% { opacity: 0; } 75% { opacity: 0.5; } 100% { opacity: 1; } } label:hover { cursor: pointer; /*鼠标移上去会变成手的形状*/ border-bottom: solid 4px rgb(35, 35, 35); /* 设置底部边框为实线，大小和颜色*/ } a { color: #fff; text-decoration: none; } .wrongSelect { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 10%; /*相对父元素百分比*/ height: 20%; top: 32%; left: 10%; background: url(\"../img/page_face1.jpg\") no-repeat; /*filter: brightness(80%);*/ background-size: contain; opacity: 0; } button { display: none; } button:active + .newButton { animation-name: shake; animation-duration: 0.4s; animation-iteration-count: 1; } @keyframes shake { 0% { transform: translate(2px, 2px); } 25% { transform: translate(-2px, -2px); } 50% { transform: translate(0px, 0px); } 75% { transform: translate(2px, -2px); } 100% { transform: translate(-2px, 2px); } }"},{"title":"","date":"2024-02-15T08:54:26.474Z","updated":"2024-02-15T08:54:26.474Z","comments":true,"path":"life/css/page3.css","permalink":"http://example.com/life/css/page3.css","excerpt":"","text":"* { padding: 0; margin: 0; font-family: Cambria; user-select: none; } body { background-color: rgb(255, 255, 255); } .shell { width: 100%; height: 100%; background-color: rgb(255, 255, 255); overflow: hidden; /* 内部元素超出本容器后直接隐藏 */ } .page { /*transform: translateY(-110%); /*让元素移出可视画面*/ position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 100%; /*相对父元素百分比*/ height: 40%; background-color: #7a7281; } .pageImage { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 80%; /*相对父元素百分比*/ height: 75%; bottom: 15px; left: 10%; background: url(\"../img/page3.png\"); /*filter: brightness(80%);*/ background-size: cover; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); animation: imEffect; animation-duration: 1s; animation-iteration-count: 1; /* 播放几次动画*/ } .pageImage h1 { font-size: 75px; text-align: center; color: azure; margin-top: -10%; animation-name: buttonEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } @keyframes imEffect { 0% { /* % 表示执行时间，0%表示开始 */ opacity: 0; transform: translateX(-110%); } 100% { /* 100%表示结束 */ opacity: 1; transform: translateX(0px); } } .container { animation-name: buttonEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } .newButton { display: block; /*显示模式，有inline和block，block是块状，内部可以添加其他元素，是个容器*/ width: 20%; color: #fff; font-size: 40px; border-bottom: #fff solid 4px; text-align: center; position: absolute; top: calc(20% - (var(--i) * 5%)); margin: 50px; left: calc(20% + (var(--i) * 40%)); z-index: 999; /*元素堆叠顺序，越大越能显示在上面*/ /*元素过渡时间，下面应该会有这个元素的变化*/ } @keyframes buttonEffect { 0% { opacity: 0; } 50% { opacity: 0; } 100% { opacity: 1; } } label:hover { cursor: pointer; /*鼠标移上去会变成手的形状*/ border-bottom: solid 4px rgb(35, 35, 35); /* 设置底部边框为实线，大小和颜色*/ } a { color: #fff; text-decoration: none; } .wrongSelect { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 10%; /*相对父元素百分比*/ height: 20%; top: 32%; left: 10%; background: url(\"../img/page_face3.jpg\") no-repeat; /*filter: brightness(80%);*/ background-size: contain; opacity: 0; } button { display: none; } button:active + .newButton { animation-name: shake; animation-duration: 0.4s; animation-iteration-count: 1; } @keyframes shake { 0% { transform: translate(2px, 2px); } 25% { transform: translate(-2px, -2px); } 50% { transform: translate(0px, 0px); } 75% { transform: translate(2px, -2px); } 100% { transform: translate(-2px, 2px); } }"},{"title":"","date":"2024-02-15T08:54:26.475Z","updated":"2024-02-15T08:54:26.475Z","comments":true,"path":"life/css/page4.css","permalink":"http://example.com/life/css/page4.css","excerpt":"","text":"* { padding: 0; margin: 0; font-family: Cambria; user-select: none; } body { background-color: rgb(255, 255, 255); } .shell { width: 100%; height: 100%; background-color: rgb(255, 255, 255); overflow: hidden; /* 内部元素超出本容器后直接隐藏 */ } .page { /*transform: translateY(-110%); /*让元素移出可视画面*/ position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 100%; /*相对父元素百分比*/ height: 40%; background-color: #7b8b6f; } .pageImage { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 80%; /*相对父元素百分比*/ height: 75%; bottom: 15px; left: 10%; background: url(\"../img/page4.png\"); /*filter: brightness(80%);*/ background-size: cover; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); animation: imEffect; animation-duration: 1s; animation-iteration-count: 1; /* 播放几次动画*/ } .pageImage h1 { font-size: 75px; text-align: center; color: azure; margin-top: -10%; animation-name: buttonEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } @keyframes imEffect { 0% { /* % 表示执行时间，0%表示开始 */ opacity: 0; transform: translateX(+100%); } 100% { /* 100%表示结束 */ opacity: 1; transform: translateX(0px); } } .container { animation-name: buttonEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } .newButton { display: block; width: 20%; color: #fff; font-size: 40px; border-bottom: #fff solid 4px; text-align: center; position: absolute; top: 0; margin: 50px; left: calc(20% + (var(--i) * 15%)); z-index: 999; } @keyframes buttonEffect { 0% { opacity: 0; } 50% { opacity: 0; } 100% { opacity: 1; } } label:hover { cursor: pointer; /*鼠标移上去会变成手的形状*/ border-bottom: solid 4px rgb(35, 35, 35); /* 设置底部边框为实线，大小和颜色*/ } a { color: #fff; text-decoration: none; } .wrongSelect { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 10%; /*相对父元素百分比*/ height: 20%; top: 32%; left: 10%; background: url(\"../img/wrongSelect.jpg\") no-repeat; /*filter: brightness(80%);*/ background-size: contain; opacity: 0; } button { display: none; } button:active + .newButton { animation-name: shake; animation-duration: 0.4s; animation-iteration-count: 1; } @keyframes shake { 0% { transform: translate(2px, 2px); } 25% { transform: translate(-2px, -2px); } 50% { transform: translate(0px, 0px); } 75% { transform: translate(2px, -2px); } 100% { transform: translate(-2px, 2px); } }"},{"title":"","date":"2024-02-15T08:54:26.474Z","updated":"2024-02-15T08:54:26.474Z","comments":true,"path":"life/css/page2.css","permalink":"http://example.com/life/css/page2.css","excerpt":"","text":"* { padding: 0; margin: 0; font-family: Cambria; user-select: none; } body { background-color: rgb(255, 255, 255); } .shell { width: 100%; height: 100%; background-color: rgb(255, 255, 255); overflow: hidden; /* 内部元素超出本容器后直接隐藏 */ } .page { /*transform: translateY(-110%); /*让元素移出可视画面*/ position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 100%; /*相对父元素百分比*/ height: 40%; background-color: #96a48b; } .pageImage { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 80%; /*相对父元素百分比*/ height: 75%; bottom: 15px; left: 10%; background: url(\"../img/page2.png\"); /*filter: brightness(80%);*/ background-size: cover; box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); } .pageImage h1 { font-size: 75px; text-align: center; color: azure; margin-top: -10%; animation: imEffect; animation-duration: 2s; animation-iteration-count: 1; /* 播放几次动画*/ } @keyframes imEffect { 0% { /* % 表示执行时间，0%表示开始 */ opacity: 0; } 50% { opacity: 0.5; transform: translateY(-50px); } 100% { /* 100%表示结束 */ opacity: 1; transform: translateY(0px); } } .container { animation-name: buttonEffect; animation-duration: 3s; animation-iteration-count: 1; /* 播放几次动画*/ } .newButton { display: block; /*显示模式，有inline和block，block是块状，内部可以添加其他元素，是个容器*/ width: 20%; color: black; font-size: 40px; border-bottom: #000 solid 4px; text-align: center; position: absolute; top: 20%; margin: 50px; left: calc(20% + (var(--i) * 40%)); z-index: 999; /*元素堆叠顺序，越大越能显示在上面*/ /*元素过渡时间，下面应该会有这个元素的变化*/ } @keyframes buttonEffect { 0% { opacity: 0; } 50% { opacity: 0; } 75% { opacity: 0.5; } 100% { opacity: 1; } } label:hover { cursor: pointer; /*鼠标移上去会变成手的形状*/ border-bottom: solid 4px rgb(220, 220, 220); /* 设置底部边框为实线，大小和颜色*/ } a { color: black; text-decoration: none; } .wrongSelect { position: absolute; /* 绝对定位，坐标相对于父元素来定位, relative 是相对自己本身上一次位置进行定位 */ width: 10%; /*相对父元素百分比*/ height: 20%; top: 32%; right: 3%; background: url(\"../img/page_face2.jpg\") no-repeat; /*filter: brightness(80%);*/ background-size: contain; opacity: 0; } button { display: none; } button:active + .newButton { animation-name: shake; animation-duration: 0.4s; animation-iteration-count: 1; } @keyframes shake { 0% { transform: translate(2px, 2px); } 25% { transform: translate(-2px, -2px); } 50% { transform: translate(0px, 0px); } 75% { transform: translate(2px, -2px); } 100% { transform: translate(-2px, 2px); } }"},{"title":"","date":"2024-02-15T08:54:26.661Z","updated":"2024-02-15T08:54:26.661Z","comments":true,"path":"life/js/common.js","permalink":"http://example.com/life/js/common.js","excerpt":"","text":"$(document).ready(function () { $(\"#button1\").click(function () { var my_button = $(\"#face\"); my_button.animate( { left: \"-=2px\", top: \"-=2px\", opacity: \"1\" }, \"slow\" ); my_button.animate({ opacity: \"0\" }); my_button.animate({ left: \"+=2px\", top: \"+=2px\", opacity: \"0\" }); }); });"},{"title":"","date":"2024-02-15T08:54:26.660Z","updated":"2024-02-15T08:54:26.660Z","comments":true,"path":"life/jquery/jquery.js","permalink":"http://example.com/life/jquery/jquery.js","excerpt":"","text":"/*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !(function (e, t) { \"use strict\"; \"object\" == typeof module && \"object\" == typeof module.exports ? (module.exports = e.document ? t(e, !0) : function (e) { if (!e.document) throw new Error(\"jQuery requires a window with a document\"); return t(e); }) : t(e); })(\"undefined\" != typeof window ? window : this, function (C, e) { \"use strict\"; var t = [], r = Object.getPrototypeOf, s = t.slice, g = t.flat ? function (e) { return t.flat.call(e); } : function (e) { return t.concat.apply([], e); }, u = t.push, i = t.indexOf, n = {}, o = n.toString, v = n.hasOwnProperty, a = v.toString, l = a.call(Object), y = {}, m = function (e) { return ( \"function\" == typeof e && \"number\" != typeof e.nodeType && \"function\" != typeof e.item ); }, x = function (e) { return null != e && e === e.window; }, E = C.document, c = { type: !0, src: !0, nonce: !0, noModule: !0 }; function b(e, t, n) { var r, i, o = (n = n || E).createElement(\"script\"); if (((o.text = e), t)) for (r in c) (i = t[r] || (t.getAttribute && t.getAttribute(r))) && o.setAttribute(r, i); n.head.appendChild(o).parentNode.removeChild(o); } function w(e) { return null == e ? e + \"\" : \"object\" == typeof e || \"function\" == typeof e ? n[o.call(e)] || \"object\" : typeof e; } var f = \"3.6.0\", S = function (e, t) { return new S.fn.init(e, t); }; function p(e) { var t = !!e && \"length\" in e && e.length, n = w(e); return ( !m(e) && !x(e) && (\"array\" === n || 0 === t || (\"number\" == typeof t && 0 < t && t - 1 in e)) ); } (S.fn = S.prototype = { jquery: f, constructor: S, length: 0, toArray: function () { return s.call(this); }, get: function (e) { return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e]; }, pushStack: function (e) { var t = S.merge(this.constructor(), e); return (t.prevObject = this), t; }, each: function (e) { return S.each(this, e); }, map: function (n) { return this.pushStack( S.map(this, function (e, t) { return n.call(e, t, e); }) ); }, slice: function () { return this.pushStack(s.apply(this, arguments)); }, first: function () { return this.eq(0); }, last: function () { return this.eq(-1); }, even: function () { return this.pushStack( S.grep(this, function (e, t) { return (t + 1) % 2; }) ); }, odd: function () { return this.pushStack( S.grep(this, function (e, t) { return t % 2; }) ); }, eq: function (e) { var t = this.length, n = +e + (e < 0 ? t : 0); return this.pushStack(0"}],"posts":[{"title":"梯度下降法","slug":"最优化方法/梯度下降法","date":"2024-03-09T16:06:00.000Z","updated":"2024-03-09T16:14:09.385Z","comments":true,"path":"2024/03/57eb35381a43.html","permalink":"http://example.com/2024/03/57eb35381a43.html","excerpt":"1. 基本原理 对于无约束优化问题： \\[ min \\quad f(x) \\] 将目标函数在 \\(x_{k}\\) 处进行一阶泰勒展开 \\[ \\begin{aligned} f(x_{k+1}) &amp;= f(x_{k}) + g(x_{k})(x_{k+1} - x_{k}) \\\\ g(x_{k}) &amp;= f&#39;(x_{k}) \\end{aligned} \\]","text":"1. 基本原理 对于无约束优化问题： \\[ min \\quad f(x) \\] 将目标函数在 \\(x_{k}\\) 处进行一阶泰勒展开 \\[ \\begin{aligned} f(x_{k+1}) &amp;= f(x_{k}) + g(x_{k})(x_{k+1} - x_{k}) \\\\ g(x_{k}) &amp;= f&#39;(x_{k}) \\end{aligned} \\] 梯度下降法的目标是希望 \\(f(x)\\) 在当前所在位置向下降量最大的方向扩展，即： \\[ \\begin{aligned} f(x_{k+1}) - f(x_{k}) &amp;= g(x_{k}) \\cdot \\alpha \\vec{v} \\\\ &amp; = \\alpha \\times ||g(x_{k})|| \\times ||\\vec{v}|| \\times cos(\\theta) \\end{aligned} \\] 所以要使得 \\(f(x_{k+1}) - f(x_{k})\\) 的绝对值最大，并且为负，需要 \\(cos(\\theta) = -1\\)，即 \\(\\vec{v} = -g(x_{k})\\)，所以有： \\[ x_{k+1} = x_{k} - \\alpha \\times g(x_{k}) \\] 2. 局限性 在靠近极值点时更新步长会变得很小，由此造成迭代次数过大。 3. 参考 梯度下降算法的数学推导_","categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"}],"tags":[]},{"title":"KKT条件","slug":"最优化方法/KKT条件","date":"2024-03-09T16:06:00.000Z","updated":"2024-03-09T16:17:19.701Z","comments":true,"path":"2024/03/db850e69690f.html","permalink":"http://example.com/2024/03/db850e69690f.html","excerpt":"等式约束的优化问题：使用拉格朗日乘数法构建拉格朗日函数，利用求取极值的必要性，转换为无约束优化问题，可以使用梯度下降法、牛顿法，共轭梯度法等方法进行迭代求解。 带有不等式约束的优化问题：构建广义拉格朗日函数，然后使用KKT条件进行求解。","text":"等式约束的优化问题：使用拉格朗日乘数法构建拉格朗日函数，利用求取极值的必要性，转换为无约束优化问题，可以使用梯度下降法、牛顿法，共轭梯度法等方法进行迭代求解。 带有不等式约束的优化问题：构建广义拉格朗日函数，然后使用KKT条件进行求解。 对于带约束的优化问题（不一定是凸问题）： \\[ \\begin{array}{ll} \\min &amp; f_0(\\boldsymbol{x}), \\boldsymbol{x} \\in \\mathbb{R}^n \\\\ &amp; f_i(\\boldsymbol{x}) \\leq 0 \\text {, 其中 } \\mathrm{i}=1,2,3 \\ldots \\mathrm{m} \\\\ \\text { s.t. } &amp; h_i(\\boldsymbol{x})=0 \\text {, 其中 } \\mathrm{i}=1,2,3 \\ldots q \\end{array} \\] 1. 首先构建拉格朗日函数，将原问题进行等价转换： image.png 问题：为什么拉格朗日乘子\\(\\lambda \\geq 0\\)？ 答：为了使得原函数 \\(f_{0}(x)\\) 等价为 极大的拉格朗日函数。也就是上面的当 x 在可行域和不在可行域时需要满足的条件，从而将原问题等价为极小极大拉格朗日问题。 2. 将原问题转换为对偶问题，就是最大最小过程进行交换： image.png 这里，对偶问题进行进一步转化： \\[ \\begin{array}{ll} 对偶问题: &amp;\\max _{\\lambda, v} L(x,\\lambda, v) \\\\ \\text { s.t. } &amp; \\nabla_{\\boldsymbol{x}} L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{v})=\\mathbf{0} \\\\ &amp; \\boldsymbol{\\lambda} \\geq \\mathbf{0} \\end{array} \\] 注意对偶函数 \\(g(\\lambda,v)\\)的变量为 \\(\\lambda,v\\) ，然后分析对偶函数： - \\(g(\\lambda,v)\\) 是关于变量的线性函数，因此既是凸函数也是凹函数； - 对偶问题可行域为 \\(\\lambda \\geq 0\\) ，是半空间，因此为凸空间。 所以无论原问题是不是凸问题，对偶问题一定是凸问题。 3. 对偶问题于原问题之间解的关系 对偶问题的解是原问题解的下界，这是弱对偶关系，即 \\(P* \\geq D*\\)。 对偶问题的解是原问题的解，这是强对偶关系，即 \\(P* = D*\\) image.png 4. 原始问题要是一个强对偶问题 需要满足： - 原始问题为凸问题； - 满足 Slack 条件； 5. 最终，如何求解一个带约束的凸优化问题 使用 KKT 条件求解，KKT 条件是原始问题为强对偶问题的必要条件，也就是说原始问题如果是强对偶，那么一定满足KKT条件，但满足KKT条件，不一定是强对偶。 互补松弛是构建拉格朗日函数时需要满足的，就是松弛条件和紧致条件的特性的统一表示。 image.png 6. 补充 松弛条件和紧致条件 image.png 7. 参考 KKT条件简要说明 拉格朗日对偶性","categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"}],"tags":[]},{"title":"牛顿法","slug":"最优化方法/牛顿法","date":"2024-03-09T16:05:00.000Z","updated":"2024-03-09T16:19:57.955Z","comments":true,"path":"2024/03/c814794462ec.html","permalink":"http://example.com/2024/03/c814794462ec.html","excerpt":"1. 基本原理 同样对于无约束优化问题： \\[ min \\quad f(x) \\] 我们求其导数的零点，就可以得到函数极值，并且若 \\(f&#39;&#39;(x_{k})&gt;0\\) ，那么 \\(x_{k}\\) 就是函数极小值点。","text":"1. 基本原理 同样对于无约束优化问题： \\[ min \\quad f(x) \\] 我们求其导数的零点，就可以得到函数极值，并且若 \\(f&#39;&#39;(x_{k})&gt;0\\) ，那么 \\(x_{k}\\) 就是函数极小值点。 将目标函数在 \\(x_{k}\\) 处进行二阶泰勒展开： \\[ f(x_{k+1}) = f(x_{k}) + f&#39;(x_{k})(x_{k+1} - x_{k}) + \\frac{1}{2}f&#39;&#39;(x_{k})(x_{k+1}-x_{k})^{2} \\] 求一阶导数零点，即 \\[ \\begin{aligned} f&#39;(x_{k}) + f&#39;&#39;(x_{k})(x_{k+1}-x_{k}) &amp;= f(x_{k+1})&#39; \\\\ &amp; = 0 \\\\ \\end{aligned} \\] 得到递增方向： \\[ \\begin{aligned} x_{k+1} &amp;= x_{k} - (f&#39;&#39;(x_{k}))^{-1}f&#39;(x_{k}) \\\\ &amp;= x_{k} - (f&#39;&#39;(x_{k}))^{-1}g(x_{k}) \\end{aligned} \\] 2. 对比梯度下降法 梯度下降法： \\[ x_{k+1} = x_{k} - \\alpha \\times g(x_{k}) \\] 牛顿法： \\[ x_{k+1} = x_{k} - (f&#39;&#39;(x_{k}))^{-1}g(x_{k}) \\] 所以牛顿法其实是通过海塞矩阵求取了一个步长，其迭代速度相比梯度下降法会快很多，但是海塞矩阵的求解与求逆却相对要难很多。 3. 局限性 要求给定的方程需要二阶可导 非凸函数的海塞矩阵不一定有逆 数据较大的时候，海塞矩阵的计算量偏大 4. 参考 牛顿法、高斯—牛顿法（Gauss–Newton）和其他拟牛顿法","categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"}],"tags":[]},{"title":"高斯牛顿法","slug":"最优化方法/高斯牛顿法","date":"2024-03-09T16:05:00.000Z","updated":"2024-03-09T16:22:20.554Z","comments":true,"path":"2024/03/91eeeeac8bd1.html","permalink":"http://example.com/2024/03/91eeeeac8bd1.html","excerpt":"高斯牛顿法主要为了解决最小二乘问题，构造了能拟合替代海塞矩阵的矩阵，从而用牛顿法去求解最优值。","text":"高斯牛顿法主要为了解决最小二乘问题，构造了能拟合替代海塞矩阵的矩阵，从而用牛顿法去求解最优值。 1. 最小二乘问题 线性最小二乘 用直线 \\(y = \\theta^{T} x, x\\in R^{n}, y\\in R\\) 去拟合给定的输入输出数据，有 m 组数据，则构建残差模型： \\[ f(\\theta) = \\frac{1}{2} ||A\\theta-b||^{2} \\] 其中 \\[ \\begin{aligned} A = [x_{1},x_{2},x_{3}...x_{m}]^{T} \\quad x_{i} \\in R^{n}\\\\ b = [y_{1},y_{2},y_{3}...y_{m}]^{T} \\quad y_{i} \\in R \\end{aligned} \\] 线性最小二乘求解，直接对 \\(f(\\theta)\\) 求导，令导数为0，则可以得到： \\[ \\begin{aligned} \\frac{\\partial f(\\theta)}{\\partial \\theta} &amp;= A^{T}(A\\theta-b) \\\\ &amp; = 0 \\\\ \\end{aligned} \\] 所以直接求解得到： \\[ \\theta = (A^{T}A)^{-1}A^{T}b \\] 非线性最小二乘问题 对于目标函数： \\[ F(x) = \\frac{1}{2} ||f(x)||^{2} = \\frac{1}{2}f^{T}(x)f(x), \\quad f(x) = [f_{1}(x),f_{2}(x) ... f_{m}(x)]^{T}, \\quad x\\in R^{n} \\] 将 \\(f(x)\\) 在 \\(x_{k}\\) 处进行一阶泰勒展开，得到： \\[ f(x_{k+1}) = f(x_{k}) + J(x_{k}) (x_{k+1}-x_{k}) \\] 注意，这里的 \\(J(x_{k})\\) 是 \\(f(x)\\) 的一阶导数，而不是 \\(F(x)\\) 的一阶导数。则： \\[ \\begin{aligned} \\frac{\\partial F(x_{k+1})}{\\partial x_{k+1}} &amp;= \\frac{1}{2}f^{T}(x_{k+1})J(x_{k}) + \\frac{1}{2} J^{T}(x_{k})f(x_{k+1}) \\\\ &amp;=J^{T}(x_{k})f(x_{k}) + J^{T}(x_{k})J(x_{k})(x_{k+1} - x_{k}) \\end{aligned} \\] 按照高斯牛顿法的思想，需要一阶导数为零，则可以得到迭代时的递增方式： \\[ x_{k+1} = x_{k} - (J^{T}(x_{k})J(x_{k}))^{-1}J^{T}(x_{k})f(x_{k}) \\] 而原始目标函数 \\(F(x)\\) 的一阶导数： \\[ \\begin{aligned} g(x) &amp;= F&#39;(x) \\\\ &amp;= \\frac{1}{2}f^{T}(x)J(x) + \\frac{1}{2}J^{T}(x)f(x) \\\\ &amp;= J^{T}f(x) \\end{aligned} \\] 所以高斯牛顿法的步数递增可以表示为： \\[ x_{k+1} = x_{k} - (J^{T}(x_{k})J(x_{k}))^{-1}g(x_{k}) \\] 注意和牛顿法进行对比： !牛顿法 可以看出，高斯牛顿法就是使用 \\(J^{T}(x_{k})J(x_{k})\\) 来对原始目标函数 \\(F(x_{k})\\) 的海塞矩阵 \\(F&#39;&#39;(x_{k})\\) 进行了近似。 2. 高斯牛顿法局限性 \\(J^{T}(x_{k})J(x_{k})\\) 只具备半正定性质，但可能求解出来是奇异矩阵，导致求逆失败，从而计算下一步位置 \\(x_{k+1}\\) 失败； 当计算得到的 \\(x_{k+1}\\) 相对 \\(x_{k}\\) 的变化太大，从而用二阶展开无法近似函数，导致收敛失败。 3. 参考 参考1","categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"}],"tags":[]},{"title":"Gazebo中bug集合","slug":"ROS/ROS笔记/Gazebo中bug集合","date":"2024-03-09T06:10:00.000Z","updated":"2024-03-09T06:12:55.889Z","comments":true,"path":"2024/03/d3ca81927196.html","permalink":"http://example.com/2024/03/d3ca81927196.html","excerpt":"1. 终端无法打开gazebo 终端输入 gazebo 后直接返回，并没有打开 gazebo，一般是后台有 gazebo 进程在跑。","text":"1. 终端无法打开gazebo 终端输入 gazebo 后直接返回，并没有打开 gazebo，一般是后台有 gazebo 进程在跑。 首先查看是否有另一个 gazebo 进程打开 1gazebo --verbose 若报错并提示有进程已打开，则关闭 gazebo 进程即可 1killall gzserver 2. 更改机器人位置 两种方法更改位置","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"Launch文件编写","slug":"ROS/ROS笔记/Launch文件编写","date":"2024-03-09T06:10:00.000Z","updated":"2024-03-09T06:12:59.845Z","comments":true,"path":"2024/03/fc172c3ee8ff.html","permalink":"http://example.com/2024/03/fc172c3ee8ff.html","excerpt":"1. 示例分析 这是一个在Rviz中加载 urdf 模型的launch文件，以此为例子进行launch文件分析。 12345678&lt;launch&gt; &lt;arg name=&quot;gui&quot; default=&quot;False&quot; /&gt; &lt;param name=&quot;robot_description&quot; command=&quot;cat $(find vehicle_description)/urdf/lexus.urdf&quot;/&gt; &lt;param name=&quot;use_gui&quot; value=&quot;$(arg gui)&quot;/&gt; &lt;node name=&quot;joint_state_publisher&quot; pkg=&quot;joint_state_publisher&quot; type=&quot;joint_state_publisher&quot;/&gt; &lt;node name=&quot;robot_state_publisher&quot; pkg=&quot;robot_state_publisher&quot; type=&quot;state_publisher&quot;/&gt; &lt;node name=&quot;rviz&quot; pkg=&quot;rviz&quot; type=&quot;rviz&quot; args=&quot;-d $(find urdf_tutorial)/urdf.rviz&quot; required=&quot;true&quot;/&gt;&lt;/launch&gt;","text":"1. 示例分析 这是一个在Rviz中加载 urdf 模型的launch文件，以此为例子进行launch文件分析。 12345678&lt;launch&gt; &lt;arg name=&quot;gui&quot; default=&quot;False&quot; /&gt; &lt;param name=&quot;robot_description&quot; command=&quot;cat $(find vehicle_description)/urdf/lexus.urdf&quot;/&gt; &lt;param name=&quot;use_gui&quot; value=&quot;$(arg gui)&quot;/&gt; &lt;node name=&quot;joint_state_publisher&quot; pkg=&quot;joint_state_publisher&quot; type=&quot;joint_state_publisher&quot;/&gt; &lt;node name=&quot;robot_state_publisher&quot; pkg=&quot;robot_state_publisher&quot; type=&quot;state_publisher&quot;/&gt; &lt;node name=&quot;rviz&quot; pkg=&quot;rviz&quot; type=&quot;rviz&quot; args=&quot;-d $(find urdf_tutorial)/urdf.rviz&quot; required=&quot;true&quot;/&gt;&lt;/launch&gt; 1.1 arg name &lt;arg name=\"**\" default =“False\"/&gt; 或者 &lt;arg name=“---\" value=”---\"/&gt; 这是launch文件的局部变量，供内部使用，可以看到在下面调用变量时使用$(arg **) 进行。 default=“---\" 是变量的默认值，可以在命令行中使用 roslaunch 命令时指定具体的值，例如: 1roslaunch vehicle_description dispaly.launch gui:=&quot;----&quot; //gui 是定义的变量名字 value=“---\" 就是指定了数值，无法更改。 1.2 param name &lt;param name=“---\" value=”---\" or command=\"命令\" or textfile=“文件path\"/&gt; 这是launch文件向ROS服务器ros master 传递的参数，可以直接指定数值，或者要传递的是一个文件，可以用textfile=“path\" 指定文件，或在这里使用command=”cat /filepath\" 的方式打开这个文件进行传递，cat 命令就是打开文件，这里与textfile=“---\" 效果相同。 1.3 rosparam file &lt;rosparam file =\"$(find 2dnav_pr2)/config/costmap_common_params.yaml\" command=\"load\" ns=\"local_costmap\" /&gt; 这是用yaml 配置文件的方式一次性载入多个参数，使用方法如上。 1.4 node name &lt;node name=\"---\" pkg=“---\" type=”----\"/&gt; 这里就是launch文件最为关键的启动节点的方法了。 pkg：节点所在的功能包名称 name：节点运行的名称，将覆盖节点中init()赋予节点的名称 type：节点的可执行文件名称 output = “screen”：将节点的标准输出打印到终端屏幕，默认输出为日志文档； respawn = \"true\"：复位属性，该节点停止时，会自动重启，默认为false； required = \"true\"：必要节点，当该节点终止时，launch文件中的其他节点也被终止； ns = \"namespace\"：命名空间，为节点内的相对名称添加命名空间前缀； args = \"arguments\"：节点需要的输入参数。 1.5 remap &lt;remap from=\"/turtlebot/cmd_vel\" to=\"/cmd_vel\"/&gt; 重映射，将/turtlebot/cmd_vel消息重映射为/cmd_vel消息 1.6 include &lt;include file=\"$(dirname)/other.launch\" /&gt; 用include包含其他launch文件。","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"ROS控制程序时间间隔","slug":"ROS/ROS笔记/ROS控制程序时间间隔","date":"2024-03-09T06:10:00.000Z","updated":"2024-03-09T06:13:04.999Z","comments":true,"path":"2024/03/8fcfbb5a0ae4.html","permalink":"http://example.com/2024/03/8fcfbb5a0ae4.html","excerpt":"ros::Duration(1.0).sleep() 在当前位置阻塞 1s","text":"ros::Duration(1.0).sleep() 在当前位置阻塞 1s","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"rqt_plot使用","slug":"ROS/ROS笔记/rqt_plot使用","date":"2024-03-09T06:10:00.000Z","updated":"2024-03-09T06:13:09.800Z","comments":true,"path":"2024/03/21ac3347f9de.html","permalink":"http://example.com/2024/03/21ac3347f9de.html","excerpt":"1. 启用命令 1rqt_plot /current_velocity/twist/linear/x","text":"1. 启用命令 1rqt_plot /current_velocity/twist/linear/x 2. 调节轴距 界面上的 “放大镜” 工具，鼠标右键可以缩小界面。","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"话题与消息","slug":"ROS/ROS笔记/话题与消息","date":"2024-03-09T06:10:00.000Z","updated":"2024-03-09T06:12:50.223Z","comments":true,"path":"2024/03/f028da3460ac.html","permalink":"http://example.com/2024/03/f028da3460ac.html","excerpt":"1. ROS 中话题与消息 1.1 定义 ROS 中各节点之间的通信使用消息传递，消息有组织的存放在话题里，节点发布消息到话题里或者订阅话题以获得其他的消息。","text":"1. ROS 中话题与消息 1.1 定义 ROS 中各节点之间的通信使用消息传递，消息有组织的存放在话题里，节点发布消息到话题里或者订阅话题以获得其他的消息。 1.2 查看当前的节点图 1rqt_graph 使用该命令可以得到当前的节点图，节点与节点之间展示的是其通信的话题。 1.3 查看消息的一些命令 12345678910rostopic list // 获得当前的活跃话题rostopic echo topic-name //在终端中显示该话题上发布的消息rostopic hz topic-name // 测试消息发布的频率rostopic bw topic-name // 测试每秒中发布消息所占的字节量rostopic info topic-name // 查看话题的基本信息，包括消息类型(Type),发布节点(Publishers),订阅节点(Subscribers)rosmsg show message-type-name //查看消息的详情rostopic pub -r rate-in-hz topic-name msg-type msg-content //使用命令行发布消息，其中 rate-in-hz 为发布频率rostopic pub -r 1 /turtle1/cmd_vel geometry_msgs/Twist &#x27;[0,0,0]&#x27;&#x27;[0,0,1]&#x27; //例子 1.4 消息的命名 1package-name/type-name //第一项为消息所属包名，第二项为消息类型名 1.5 一些注意事项 话题通信是多对多的，即同一个话题可以有多个发布者和多个订阅者。 ROS节点是松耦合的，一个节点不依赖于另外一个节点，节点之间唯一的交互就是基于话题和消息的同通信，即使只有一个节点也可以单独运行，因为它会一直等待订阅的话题，而不会直接报错。 消息的内容除了在命令行中显式的书写，还可以写在 YAML 文件中，从而直接载入文件。 1.6 使用 rostopic pub 直接发布命令 使用 rostopic pub 可以直接在命令行发布消息，格式就如同上面所示，但是由于消息的格式通常很复杂，所以 bash 命令行中给出了足够的优化，主要输入完话题名后，按 Tab 键可以补全消息类型，再按 Tab 还可以直接给出消息的格式，直接填写即可。 1234567891011rostopic pub -1 /initialpose geometry_msgs/PoseWithCovarianceStamped &quot;header: seq: 0 stamp: secs: 0 nsecs: 0 frame_id: &#x27;world&#x27;pose: pose: position: &#123;x: 24.5, y: -7.15, z: 0.276&#125; orientation: &#123;x: 0.0, y: 0.0, z: 0.0, w: 0.0&#125; covariance: [0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06853892326654787]&quot; 2. Ros 中消息发布 2.1 消息发布节点程序示例 123456789101112131415161718192021222324252627282930# &lt;ros/ros.h&gt;#include &lt;geometry_msgs/Twist.h&gt; //引入需要发布的消息类型，&quot;geometry_msgs&quot;是定义消息的功能包，”Twist“ 是消息类型#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123; ros::init(argc,argv,&quot;publish_velocity&quot;); //初始化ROS, 每个程序都需要，至于其内部结构再观察，&quot;publish_velocity&quot; 是该节点的名字 ros::NodeHandle nh; //创建节点处理对象 ros::Publisher pub = nh.advertise&lt;geometry_msgs::Twist&gt;(&quot;turtle1/cmd_vel&quot;,1000) //生成一个发布对象，详细见说明1 srand(time(0)); Ros::Rate rate(2); //控制循环速度，单位是HZ，也就控制了消息发布的速度，这里将循环控制到每秒2次 while(ros::ok()) // 使用 ros::ok()判断节点是否正常工作 &#123; geometry_msgs::Twist msg; //创建消息对象 msg.linear.x = double(rand())/double(RAND_MAX); //可以看出消息的每个域都被按照其层级关系变成了类的共有成员，以便进行赋值 msg.angular.z = 2*double(rand())/double(RAND_MAX)-1; pub.publish(msg); // ROS_INFO_STREAM 是ros中一个类似输出流的设置，可在终端中看到输出 ROS_INFO_STREAM(&quot;sending random velocity command:&quot;&lt;&lt;&quot;linear=&quot;&lt;&lt;msg.linear.x&lt;&lt;&quot;angular=&quot;&lt;&lt;msg.angular.z); rate.sleep(); //配合rate(2)的设定，控制循环速度 &#125; &#125; 2.2 说明 2.2.1 创建发布对象 1ros::Publisher pub=node_handle.advertise&lt;message_type&gt;(topic_name,queue_size) message_type 是消息类型，是C++的对象定义 topic_name 是字符串，是话题名，注意没有前斜杠(/)，例如本例子中 \"turtle1/cmd_vel\", 在 rostopic list 列出的是/turtle1/cmd_vel，这里甚至可以是自己定义的话题名，不需要严格被限制到官方的话题中。 queue_size 是发布队列的大小，publish方法其实是将消息放到队列里，然后后台有线程负责实际发送消息，然后这个队列大小在这里定义，数字代表能容纳的消息数量。 2.2.2 节点是否停止工作的检查： 1ros::ok() 如果一直运行良好，则返回true，否则返回false 使用 Ctrl-C 会返回false，但不是立刻终止该结点，而是会接着进行剩下的程序，这对于必要的收尾工作很重要。 2.2.3 编译相关： 修改CMakeLists.txt 文件，声明消息的依赖库： 1find_package(catkin REQUIRED COMPONENTS roscpp geometry_msgs) 修改 package.xml 文件，添加依赖项 12&lt;build_depend&gt;geometry_msgs&lt;/build_depend&gt;&lt;run_depend&gt;geometry_msgs&lt;/run_depend&gt; 3. Ros中消息订阅 3.1 消息订阅程序示例 123456789101112131415161718#include &lt;ros/ros.h&gt;#include &lt;turtlesim/Pose.h&gt; //同样需要引入消息#include &lt;iomanip&gt; // 需要设置输出的浮点数精度void poseMessageReceived(const turtlesim::Pose &amp;msg) //回调函数，当接收到消息时自动执行的程序，输入参数为需要接受的消息类型的引用&#123; ROS_INFO_STREAM(std::setprecision(2)&lt;&lt;std::fixd&lt;&lt;&quot;position=(&quot;&lt;&lt;msg.x&lt;&lt;&quot;,&quot;&lt;&lt;msg.y&lt;&lt;&quot;)&quot;&lt;&lt;&quot;*direction=&quot;&lt;&lt;msg.theta);&#125;int main(int argc, char **argv)&#123; ros::init(argc,argv,&quot;subscribe_to_pose&quot;); //常规操作，初始化 ros::NodeHandle nh; ros::Subscriber sub = nh.subscribe(&quot;turtle1/pose&quot;,1000,&amp;poseMessageReceived); //创建一个订阅对象，详见说明1 ros::spin();//等待并执行回调函数，类似 while() 循环&#125; 3.2 说明 3.2.1 创建订阅对象 1ros::Subscriber sub = node_handle.subscribe(topic_name,queue_size,pointer_to_callback_function) 注意这里不同于发布者需要以模板参数形式指定消息类型，所以一个订阅对象是不需要知道消息类型的，主要通过回调函数去确认消息类型。 topic_name 同发布对象。 queue_size 是订阅队列的大小。ros 中新消息到达时会被保存到一个队列中，这里定义这个队列的大小，需要等待回调函数去取出消息，这里清空队列的速度取决于回调函数的执行速度，所以回调函数的计算时间一般不过长，以免丢失消息。 pointer_to_callback_function 是指向回调函数的指针，注意只能用名字，不能加函数的括号()。 3.2.2 ros::spin()与 ros::spinOnce() 区别 其处理机制详见这篇文章。每次有新的消息到达，都会有回调函数进入回调函数队列然后直到主程序中有这俩函数时，才会去回调函数队列中取队头函数，并执行。 主要使用区别在于当程序中还有没有其他重复工作需要做，如果不需要，则使用ros::spin() 就可以； 如果需要，那就写一个循环，循环内先做其他的重复工作，然后使用ros::spinOnce() 来处理回调。 ros::spin() 相当于 1234while(ros::ok())&#123; ros::spinOnce();&#125;","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"工作空间建立与编译","slug":"ROS/ROS笔记/工作空间建立与编译","date":"2024-03-09T06:09:00.000Z","updated":"2024-03-09T06:12:44.092Z","comments":true,"path":"2024/03/cfa9782ab392.html","permalink":"http://example.com/2024/03/cfa9782ab392.html","excerpt":"1. 工作空间建立与编译 1. 1 新建 Ros 工作空间 1234567mkdir -p ~/lkx_ws/srccd ~/lkx_ws/srccatkin_init_workspace cd ../catkin_makesouce devel/setup.bash","text":"1. 工作空间建立与编译 1. 1 新建 Ros 工作空间 1234567mkdir -p ~/lkx_ws/srccd ~/lkx_ws/srccatkin_init_workspace cd ../catkin_makesouce devel/setup.bash 1.2 在ROS工作空间中新建功能包及相关编译选项 12catkin_create_pkg my_pkg roscpp rospy std_msgs // 第一个参数是包名，后面是依赖项。catkin_make // 在src同级文件夹进行编译，注意看终端输出，有可能还需要在build文件夹下进行make编译 1.3 在工作空间中查询功能包是否存在 1rospack find pkg_name 2. 因为更换网络导致IP地址变化的报错 在 .bashrc 中更换ROS的通讯IP为当前电脑的IP 1sudo gedit ./bashrc","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"README","slug":"ROS/ROS笔记检索/README","date":"2024-03-08T16:05:36.000Z","updated":"2024-03-09T15:08:01.937Z","comments":true,"path":"2024/03/a50fe40306e3.html","permalink":"http://example.com/2024/03/a50fe40306e3.html","excerpt":"1. 使用说明 本分类主要存放在ROS中学习和操作的相关笔记，该页面为检索归类页面。","text":"1. 使用说明 本分类主要存放在ROS中学习和操作的相关笔记，该页面为检索归类页面。 2. 教程 工作空间建立与编译 工作空间建立与编译 话题与消息 Launch文件编写 ROS控制程序时间间隔 rqt_plot使用 3. 避坑 Gazebo中bug集合","categories":[{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记检索","slug":"ROS/ROS笔记检索","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0%E6%A3%80%E7%B4%A2/"}],"tags":[]},{"title":"共轭梯度法","slug":"最优化方法/共轭梯度法","date":"2024-03-04T16:00:00.000Z","updated":"2024-03-09T16:14:09.385Z","comments":true,"path":"2024/03/528ef78b9929.html","permalink":"http://example.com/2024/03/528ef78b9929.html","excerpt":"解决求无约束优化问题的极值点的问题。 对于n维度的二次型目标函数，可在n次搜索后得到极值点。 每次搜索方向为共轭方向。","text":"解决求无约束优化问题的极值点的问题。 对于n维度的二次型目标函数，可在n次搜索后得到极值点。 每次搜索方向为共轭方向。 1. 为什么要用共轭梯度 梯度下降法受限制于搜索步长的学习率问题，可能需要多次搜索才能达到极值点； 最速下降法每次的下降方向都和上次的正交，因此会产生锯齿现象，在靠近极值点的时候会多次缓慢搜索。那么在同一个方向上可能多次下降，这不如一次在这个方向上一次搜索到底。 2. 共轭向量法 对于无约束的二次型目标函数： \\[ f(x) = \\frac{1}{2} x^{T}Ax -b^{T}x \\] 其中 \\(A\\) 是对称正定的，问题在于求取其最小值点 \\(x^{*}\\)。也可以说是求以下方程的解，这两个问题等效。 \\[ Ax = b \\] 定理：若矩阵A为对称正定阵，并且一组向量 \\(\\{d_{0},d_{1}, ...,d_{m}\\}\\) 是关于A共轭的，那么这组向量是线性无关的。 说明：向量组\\(\\{d_{0},d_{1}, ...,d_{m}\\}\\)关于矩阵A共轭，即 \\[ d_{i}^{T}Ad_{j} = 0, \\qquad \\{i \\neq j\\} \\] 可以选取一组共轭向量作为每次变量迭代的方向，即 \\(\\{d_{0},d_{1},d_{2}, ... , d_{n-1} \\}\\)，假设目标函数极值点为 \\(x^{*}\\)，则 \\[ x^{*} = x_{0} + \\alpha_{0}d_{0} + \\alpha_{1} d_{1}+ ...+ \\alpha_{n-1}d_{n-1} \\] 从 \\(x_{i}\\) 迭代到 \\(x_{i+1}\\) 的表达式为： \\[ x_{i+1} = x_{i} + \\alpha_{i} d_{i} \\] 那么 \\(d_{i}\\) 作为已知的方向，现在只需要求在这个方向上的步长 \\(\\alpha_{i}\\) 。 对于第 \\(i\\) 步时，我们有 \\[ \\begin{aligned} d_{i}^{T} A &amp;(x^{*} - x_{0}) = \\alpha_{i} d_{i}^{T} Ad_{i} ^{T} \\\\ ~\\\\ \\alpha_{i} &amp;= \\frac{d_{i}^{T} A (x^{*} - x_{0})}{ d_{i}^{T} Ad_{i} ^{T}} \\\\ &amp;=\\frac{d_{i}^{T} A (x^{*} - x_{i})}{ d_{i}^{T} Ad_{i} ^{T}} + \\frac{d_{i}^{T} A (x_{i} - x_{0})}{ d_{i}^{T} Ad_{i} ^{T}} \\\\ &amp;= -\\frac{d_{i}^{T} (Ax_{i}-b)}{ d_{i}^{T} Ad_{i} ^{T}} + 0 \\\\ &amp;= -\\frac{d_{i}^{T}g_{i}}{ d_{i}^{T} Ad_{i} ^{T}} \\end{aligned} \\] 所以，迭代公式就为： \\[ x_{i+1} = x_{i} - \\frac{d_{i}^{T}g_{i}}{ d_{i}^{T} Ad_{i} ^{T}} d_{i} \\] 这叫做共轭向量法。前提是知道二次项系数 \\(A\\) 的一组完备的共轭向量组。这里加入了一些限制，比如 \\(A\\) 是对称矩阵，则其共轭向量组是正交的，也是共轭的。那么共轭向量组就是其特征向量组。 共轭方向定理：记向量 \\(\\{ d_{0},d_{1},…,d_{n−1}\\}\\) 是 A 共轭的， \\(x_{0} \\in R^{n}\\) 是任意的一个 n 维向量，则按照 \\(x_{i+1} = x_{i} + \\alpha_{i} d_{i},g_{i} =Ax_{i}-b,\\alpha_{i} = \\frac{d_{i}^{T}g_{i}}{ d_{i}^{T} Ad_{i} ^{T}}\\) 的迭代格式进行 n 步迭代，我们就能得到 \\(x_{n} = x^{*}\\)。 3. 共轭梯度法 在共轭向量法中，每次搜索的方向就是一个共轭向量的方向，共轭向量组需要事先获得。但要是可以在迭代过程中逐步获得当前的搜索方向，也就是共轭梯度，那就更好了。 在第一次迭代给定初值 \\(x_{0}\\) 后，此时的搜索方向设定为梯度方向，即 \\[ d_{0} = -g_{0} \\] 对于 \\(x_{i+1}\\) 时的搜索方向，我们可认为是上一位置的搜索方向 \\(d_{i}\\) 和当前位置的梯度方向 \\(g_{i+1}\\) 的线性组合： \\[ d_{i+1} = -g_{i+1} + \\beta_{i} d_{i} \\] 那么，要求解得到这个 \\(\\beta_{i}\\)： \\[ \\begin{aligned} d_{i}^{T} A d_{i+1} = 0 \\\\ ~\\\\ d_{i}^{T}A(-g_{i+1}+\\beta_{i}d_{i}) = 0 \\\\ ~\\\\ \\beta_{i} = \\frac{d_{i}^{T}Ag_{i+1}}{d_{i}^{T}Ad_{i}} \\end{aligned} \\] 于是对于共轭梯度法，迭代步骤便如下： 1. 令 \\(k := 0\\)； 选择初始值 \\(x_{0}\\)。 2. 计算 \\(g_{0} = \\nabla f(x_{0})\\) ，若 \\(g_{0} = 0\\) ，停止迭代，否则令 \\(d_{0} = g_{0}\\)； 4. 计算 \\(\\alpha_{0} =-\\frac{d_{0}^{T}g_{0}}{d_{0}^{T} Ad_{0} ^{T}}\\)； 5. 完成第一次迭代： \\(x_{1} = x_{0} + \\alpha_{0} d_{0}\\)； 6. 计算 \\({i+1}\\) 时刻梯度 \\(g_{i+1} = \\nabla f(x_{i+1})\\) ； 7. 计算 \\(i+1\\) 时刻搜索方向 \\(d_{i+1} = -g_{i+1} + \\beta_{i} d_{i}\\)， 其中\\(\\beta_{i} = \\frac{d_{i}^{T}Ag_{i+1}}{d_{i}^{T}Ad_{i}}\\)。 8. 计算 \\(i+1\\) 时刻步长 \\(\\alpha_{i+1} = -\\frac{d_{i+1}^{T}g_{i+1}}{ d_{i+1}^{T} Ad_{i+1} ^{T}}\\)； 9. 搜索得到 \\(i+2\\) 时刻 \\(x_{i+2} = x_{i+1}+\\alpha_{i+1}d_{i+1}\\) 4. 补充 共轭法的每一个方向的步长是确定的，不然没有办法最终 \\(n\\) 步到达极值点（极值点是共轭向量的线性组合）。当然也可以设置为固定步长的学习率，这就不能保证 \\(n\\) 步之后到达极值点了。 共轭向量组的求解有很多方法，这里是假定当前搜索方向是当前梯度和上一位置搜索方向的线性组合。还有一些其他方法： Fletcher-Reeves （FR）法： \\(\\beta_{i} = \\frac{g_{i+1}^{T}g_{i+1}}{g_{i}^{T}g_{i}}\\) Polak-Ribière （PR）法：\\(\\beta_{i} =\\frac{g_{i+1}^{T}(g_{i+1} - g_{i})}{g_{i}^{T}g_{i}}\\)","categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"}],"tags":[]}],"categories":[{"name":"最优化方法","slug":"最优化方法","permalink":"http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"},{"name":"ROS","slug":"ROS","permalink":"http://example.com/categories/ROS/"},{"name":"ROS笔记","slug":"ROS/ROS笔记","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0/"},{"name":"ROS笔记检索","slug":"ROS/ROS笔记检索","permalink":"http://example.com/categories/ROS/ROS%E7%AC%94%E8%AE%B0%E6%A3%80%E7%B4%A2/"}],"tags":[]}