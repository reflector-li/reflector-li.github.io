<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinkX的技术站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-12T05:10:36.729Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LinkX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>环境配置索引</title>
    <link href="http://example.com/2024/03/c6992dae00e1.html"/>
    <id>http://example.com/2024/03/c6992dae00e1.html</id>
    <published>2024-03-12T02:44:00.000Z</published>
    <updated>2024-03-12T05:10:36.729Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本页面存放一系列环境配置内容文档的索引；</li></ul><span id="more"></span><h3 id="windows-环境">1. Windows 环境</h3><ul><li><a href="/2024/03/5a0267b9e9ef.html" title="Windows系统迁移笔记">Windows系统迁移笔记</a></li><li><a href="/2024/03/fc1fc6c9cd69.html" title="Windows下Eigen、osqp和osqp-eigen库的安装使用">Windows下Eigen、osqp和osqp-eigen库的安装使用</a></li><li><a href="/2024/03/9aad1447aa31.html" title="Windows下Ipopt优化库安装">Windows下Ipopt优化库安装</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本页面存放一系列环境配置内容文档的索引；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="环境配置日志" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="#环境配置索引" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>凸优化基础</title>
    <link href="http://example.com/2024/03/b5bc8dd591f5.html"/>
    <id>http://example.com/2024/03/b5bc8dd591f5.html</id>
    <published>2024-03-12T02:43:00.000Z</published>
    <updated>2024-03-12T05:43:09.189Z</updated>
    
    <content type="html"><![CDATA[<p>凸优化问题的两个基本条件：</p><ul><li>目标函数 cost function 是凸函数，即存在极小值；</li><li>求解空间是凸空间，是完整的空间，而不是破碎的。</li></ul><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;凸优化问题的两个基本条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标函数 cost function 是凸函数，即存在极小值；&lt;/li&gt;
&lt;li&gt;求解空间是凸空间，是完整的空间，而不是破碎的。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="最优化方法" scheme="http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>最优化方法索引</title>
    <link href="http://example.com/2024/03/017bb123671c.html"/>
    <id>http://example.com/2024/03/017bb123671c.html</id>
    <published>2024-03-12T02:39:00.000Z</published>
    <updated>2024-03-12T02:45:51.262Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本页面主要存放最优化方法学习笔记的索引，方便进行页面检索；</li></ul><span id="more"></span><h3 id="基础理论">1. 基础理论</h3><ul><li><a href="/2024/03/b5bc8dd591f5.html" title="凸优化基础">凸优化基础</a></li><li><a href="/2024/03/db850e69690f.html" title="KKT条件">KKT条件</a></li></ul><hr /><h3 id="优化方法">2. 优化方法</h3><ul><li><a href="/2024/03/57eb35381a43.html" title="梯度下降法">梯度下降法</a></li><li><a href="/2024/03/c814794462ec.html" title="牛顿法">牛顿法</a></li><li><a href="/2024/03/528ef78b9929.html" title="共轭梯度法">共轭梯度法</a></li><li><a href="/2024/03/91eeeeac8bd1.html" title="高斯牛顿法">高斯牛顿法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本页面主要存放最优化方法学习笔记的索引，方便进行页面检索；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="最优化方法" scheme="http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="#最优化方法索引" scheme="http://example.com/tags/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记索引</title>
    <link href="http://example.com/2024/03/944e778b7f6e.html"/>
    <id>http://example.com/2024/03/944e778b7f6e.html</id>
    <published>2024-03-12T02:30:00.000Z</published>
    <updated>2024-03-12T02:45:51.262Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本页面主要存放平时 Python使用过程中的笔记索引，方便进行文章检索；</li></ul><span id="more"></span><h3 id="python语言特性">1. Python语言特性</h3><ul><li><a href="/2024/03/cfb368e8b4c6.html" title="多线程与多进程">多线程与多进程</a></li></ul><hr /><h3 id="实用代码">2. 实用代码</h3><ul><li><a href="/2024/03/ff932a6a77c6.html" title="D-star算法实现">D-star算法实现</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本页面主要存放平时 Python
使用过程中的笔记索引，方便进行文章检索；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="#Python笔记索引" scheme="http://example.com/tags/Python%E7%AC%94%E8%AE%B0%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>D-star算法实现</title>
    <link href="http://example.com/2024/03/ff932a6a77c6.html"/>
    <id>http://example.com/2024/03/ff932a6a77c6.html</id>
    <published>2024-03-12T02:30:00.000Z</published>
    <updated>2024-03-12T02:35:56.989Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Python 实现路径规划中的D*算法；</li></ul><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2018/12/13 0013 22:30</span></span><br><span class="line"><span class="comment"># @Author  : 心一</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : D_star.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> maxsize <span class="comment"># 导入最大数，2^63-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line">        self.state = <span class="string">&quot;.&quot;</span></span><br><span class="line">        self.t = <span class="string">&quot;new&quot;</span></span><br><span class="line">        self.h = <span class="number">0</span></span><br><span class="line">        self.k = <span class="number">0</span>  <span class="comment"># k即为f</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&quot;#&quot;</span> <span class="keyword">or</span> state.state == <span class="string">&quot;#&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> maxsize  <span class="comment"># 存在障碍物时，距离无穷大</span></span><br><span class="line">        <span class="keyword">return</span> math.sqrt(math.<span class="built_in">pow</span>((self.x - state.x), <span class="number">2</span>) +</span><br><span class="line">                         math.<span class="built_in">pow</span>((self.y - state.y), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="keyword">if</span> state <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;S&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;*&quot;</span>,<span class="string">&quot;+&quot;</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    创建地图</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, row, col</span>):</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line">        self.<span class="built_in">map</span> = self.init_map()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_map</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化map</span></span><br><span class="line">        map_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.row):</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.col):</span><br><span class="line">                tmp.append(State(i, j))</span><br><span class="line">            map_list.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> map_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_map</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.row):</span><br><span class="line">            tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.col):</span><br><span class="line">                tmp += self.<span class="built_in">map</span>[i][j].state + <span class="string">&quot; &quot;</span></span><br><span class="line">            <span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_neighbers</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="comment"># 获取8邻域</span></span><br><span class="line">        state_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> state.x + i &lt; <span class="number">0</span> <span class="keyword">or</span> state.x + i &gt;= self.row:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> state.y + j &lt; <span class="number">0</span> <span class="keyword">or</span> state.y + j &gt;= self.col:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                state_list.append(self.<span class="built_in">map</span>[state.x + i][state.y + j])</span><br><span class="line">        <span class="keyword">return</span> state_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_obstacle</span>(<span class="params">self, point_list</span>):</span><br><span class="line">        <span class="comment"># 设置障碍物的位置</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> point_list:</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= self.row <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= self.col:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.<span class="built_in">map</span>[x][y].set_state(<span class="string">&quot;#&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dstar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, maps</span>):</span><br><span class="line">        self.<span class="built_in">map</span> = maps</span><br><span class="line">        self.open_list = <span class="built_in">set</span>()  <span class="comment"># 创建空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        D*算法的主要过程</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        x = self.min_state()    <span class="comment"># 获取open list列表中最小k的节点</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        k_old = self.get_kmin() <span class="comment">#获取open list列表中最小k节点的k值</span></span><br><span class="line">        self.remove(x)  <span class="comment"># 从openlist中移除</span></span><br><span class="line">        <span class="comment"># 判断openlist中</span></span><br><span class="line">        <span class="keyword">if</span> k_old &lt; x.h:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> self.<span class="built_in">map</span>.get_neighbers(x):</span><br><span class="line">                <span class="keyword">if</span> y.h &lt;= k_old <span class="keyword">and</span> x.h &gt; y.h + x.cost(y):</span><br><span class="line">                    x.parent = y</span><br><span class="line">                    x.h = y.h + x.cost(y)</span><br><span class="line">        <span class="comment"># 领域的 h 值发生了改变</span></span><br><span class="line">        <span class="keyword">if</span> k_old == x.h:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> self.<span class="built_in">map</span>.get_neighbers(x):</span><br><span class="line">                <span class="keyword">if</span> y.t == <span class="string">&quot;new&quot;</span> <span class="keyword">or</span> y.parent == x <span class="keyword">and</span> y.h != x.h + x.cost(y) \</span><br><span class="line">                        <span class="keyword">or</span> y.parent != x <span class="keyword">and</span> y.h &gt; x.h + x.cost(y):</span><br><span class="line">                    y.parent = x</span><br><span class="line">                    self.insert(y, x.h + x.cost(y))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> self.<span class="built_in">map</span>.get_neighbers(x):</span><br><span class="line">                <span class="keyword">if</span> y.t == <span class="string">&quot;new&quot;</span> <span class="keyword">or</span> y.parent == x <span class="keyword">and</span> y.h != x.h + x.cost(y):</span><br><span class="line">                    y.parent = x</span><br><span class="line">                    self.insert(y, x.h + x.cost(y))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> y.parent != x <span class="keyword">and</span> y.h &gt; x.h + x.cost(y):</span><br><span class="line">                        self.insert(x, x.h)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> y.parent != x <span class="keyword">and</span> x.h &gt; y.h + x.cost(y) \</span><br><span class="line">                                <span class="keyword">and</span> y.t == <span class="string">&quot;close&quot;</span> <span class="keyword">and</span> y.h &gt; k_old:</span><br><span class="line">                            self.insert(y, y.h)</span><br><span class="line">        <span class="keyword">return</span> self.get_kmin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.open_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        min_state = <span class="built_in">min</span>(self.open_list, key=<span class="keyword">lambda</span> x: x.k)  <span class="comment"># 获取openlist中k值最小对应的节点</span></span><br><span class="line">        <span class="keyword">return</span> min_state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_kmin</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取openlist表中k(f)值最小的k</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.open_list:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        k_min = <span class="built_in">min</span>([x.k <span class="keyword">for</span> x <span class="keyword">in</span> self.open_list])</span><br><span class="line">        <span class="keyword">return</span> k_min</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, state, h_new</span>):</span><br><span class="line">        <span class="keyword">if</span> state.t == <span class="string">&quot;new&quot;</span>:</span><br><span class="line">            state.k = h_new</span><br><span class="line">        <span class="keyword">elif</span> state.t == <span class="string">&quot;open&quot;</span>:</span><br><span class="line">            state.k = <span class="built_in">min</span>(state.k, h_new)</span><br><span class="line">        <span class="keyword">elif</span> state.t == <span class="string">&quot;close&quot;</span>:</span><br><span class="line">            state.k = <span class="built_in">min</span>(state.h, h_new)</span><br><span class="line">        state.h = h_new</span><br><span class="line">        state.t = <span class="string">&quot;open&quot;</span></span><br><span class="line">        self.open_list.add(state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="keyword">if</span> state.t == <span class="string">&quot;open&quot;</span>:</span><br><span class="line">            state.t = <span class="string">&quot;close&quot;</span></span><br><span class="line">        self.open_list.remove(state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_cost</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x.t == <span class="string">&quot;close&quot;</span>:  <span class="comment"># 是以一个openlist，通过parent递推整条路径上的cost</span></span><br><span class="line">            self.insert(x, x.parent.h + x.cost(x.parent))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, start, end</span>):</span><br><span class="line">        self.insert(end,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.process_state()</span><br><span class="line">            <span class="keyword">if</span> start.t == <span class="string">&quot;close&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        start.set_state(<span class="string">&quot;S&quot;</span>)</span><br><span class="line">        s = start</span><br><span class="line">        <span class="keyword">while</span> s != end:</span><br><span class="line">            s = s.parent</span><br><span class="line">            s.set_state(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        s.set_state(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;障碍物未发生变化时，搜索的路径如下：&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;opset 大小：&quot;</span>, <span class="built_in">len</span>(self.open_list))</span><br><span class="line">        self.<span class="built_in">map</span>.print_map()</span><br><span class="line">        tmp = start <span class="comment"># 起始点不变</span></span><br><span class="line">        self.<span class="built_in">map</span>.set_obstacle([(<span class="number">1</span>,<span class="number">2</span>)]) <span class="comment"># 障碍物发生变化</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        从起始点开始，往目标点行进，当遇到障碍物时，重新修改代价，再寻找路径</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> tmp != end:</span><br><span class="line">            tmp.set_state(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            <span class="comment"># self.map.print_map()</span></span><br><span class="line">            <span class="comment"># print(&quot;&quot;)</span></span><br><span class="line">            <span class="keyword">if</span> tmp.parent.state == <span class="string">&quot;#&quot;</span>:</span><br><span class="line">                self.modify(tmp)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp = tmp.parent</span><br><span class="line">        tmp.set_state(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;障碍物发生变化时，搜索的路径如下(*为更新的路径)：&#x27;</span>)</span><br><span class="line">        self.<span class="built_in">map</span>.print_map()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当障碍物发生变化时，从目标点往起始点回推，更新由于障碍物发生变化而引起的路径代价的变化</span></span><br><span class="line"><span class="string">        :param state:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.modify_cost(state)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            k_min = self.process_state()</span><br><span class="line">            <span class="keyword">if</span> k_min &gt;= state.h:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = Map(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># m.set_obstacle([(4, 3), (4, 4), (4, 5), (4, 6), (5, 3), (6, 3), (7, 3)])</span></span><br><span class="line">    start = m.<span class="built_in">map</span>[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">    end = m.<span class="built_in">map</span>[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">    dstar = Dstar(m)</span><br><span class="line">    dstar.run(start, end)</span><br><span class="line">    <span class="comment"># m.print_map()</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Python 实现路径规划中的D*算法；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    <category term="实用代码" scheme="http://example.com/categories/Python/%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程与多进程</title>
    <link href="http://example.com/2024/03/cfb368e8b4c6.html"/>
    <id>http://example.com/2024/03/cfb368e8b4c6.html</id>
    <published>2024-03-12T02:27:00.000Z</published>
    <updated>2024-03-12T02:35:56.989Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对 Python 中并发和并行概念；</li><li>GIL锁介绍解释；</li></ul><span id="more"></span><h3 id="基本概念">1. 基本概念</h3><h4 id="并发与并行">1.1 并发与并行</h4><ul><li><p><strong>并发(concurrency)：</strong>CPU单核运行，只不过将任务分块，使用GIL(全局解释器锁，Cpython解释器特性)锁定当前执行任务块，释放后执行其他线程任务块，造成多任务同时处理的宏观效果。对应于python 中的多线程 (thread) <imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230311194859.png"alt="|400" /></p></li><li><p><strong>并行(parallel)：</strong>多核同时处理任务，真正的同步处理。对应于python中多进程（multiprocessing）。 <imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230311195210.png"alt="|400" /></p></li></ul><h4 id="gil锁为什么产生">1.2 GIL锁为什么产生</h4><ul><li><strong>核心原因：</strong>CPU处理和IO读取可以同步，因此可以将等待IO读取的时间用来处理其他任务，从而提高效率。</li><li>python开发时多是单核处理器，为解决多任务之间数据同步和完整问题，所以使用GIL锁。</li></ul><h4 id="计算任务分类">1.3 计算任务分类</h4><ul><li><strong>CPU密集型计算(CPU-bound)：</strong>IO读取较少，主要使用CPU核心计算功能的任务，例如矩阵运算，适合使用多进程处理。</li><li><strong>IO密集型计算(IO-bound)：</strong>IO处理很多（硬盘、磁盘和网络数据交互）等，数值处理和计算较少，适合使用多线程处理。</li></ul><hr /><h3 id="线程安全">2. 线程安全</h3><p>由于GIL存在，多线程在切换时可能会产生数据读写冲突，一般通过对线程加锁解决。</p><hr /><h3 id="线程池">3. 线程池</h3><p>在多线程中，创建和销毁线程很耗时，如果能够做好线程的管理和复用，那可以进一步提高效率。线程池的使用就是为了实现这一目的，并且简化了线程的创建。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures <span class="comment"># futures 是python 中实现线程池的重要模块</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;对 Python 中并发和并行概念；&lt;/li&gt;
&lt;li&gt;GIL锁介绍解释；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    <category term="Python语言特性" scheme="http://example.com/categories/Python/Python%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下Eigen、osqp和osqp-eigen库的安装使用</title>
    <link href="http://example.com/2024/03/fc1fc6c9cd69.html"/>
    <id>http://example.com/2024/03/fc1fc6c9cd69.html</id>
    <published>2024-03-11T01:19:00.000Z</published>
    <updated>2024-03-11T01:28:44.740Z</updated>
    
    <content type="html"><![CDATA[<ul><li>项目 <a href="https://github.com/reflector-li/EMplanner">EMPlanner</a> 中需要使用到 Eigen，osqp以及osqp-eigen库，这里介绍如何在windows 下编译安装这些基本库的方法；</li><li>这里只进行依赖库安装说明，需要项目还是在 linux下开发，环境配置会简单很多。</li></ul><span id="more"></span><h3 id="eigen-库编译安装与使用">1. Eigen 库编译安装与使用</h3><h4 id="编译安装-eigen">1.1 编译安装 Eigen</h4><ul><li><ahref="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen3官网</a></li><li>Eigen 可以不用编译成库，因为其所有文件都是 <code>.hpp</code>头文件形式，没有库文件，可以直接放在自己工程文件中使用，只要在CMakeLists.txt 的 <code>include_directories()</code>中放入Eigen目录即可。但最好还是将 Eigen编译成库文件使用，编译安装方法<a href="/2024/03/aa6722f125a9.html" title="Cmake">见这里</a>，可以自定义安装目录，最后使用<code>find_package(Eigen3 REQUIRED)</code> 就可以找到对应的<code>.make</code>文件，比较神奇，因为按理来说需要指定安装的目录来查找对应的文件。</li></ul><h4 id="使用-eigen">1.2 使用 Eigen</h4><p>这里是直接将 Eigen 编译安装了，CMakeLists.txt 文档可写成如下形式：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)  </span><br><span class="line"><span class="keyword">project</span>(smoothFrenet)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span>(main main)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">target_link_libraries</span>(main Eigen3::Eigen)</span><br></pre></td></tr></table></figure></p><hr /><h3 id="osqp-库编译安装与使用">2. osqp 库编译安装与使用</h3><h4 id="编译安装-osqp">2.1 编译安装 osqp</h4><ul><li><ahref="https://osqp.org/docs/get_started/sources.html">osqp官网</a></li><li>osqp 库的安装与 Eigen类似，安装方法同样参考<a href="/2024/03/aa6722f125a9.html" title="Cmake">这里</a>。因为直接安装到系统目录需要管理员权限，并且每次使用都要赋予权限，比较麻烦，所以还是将其安装到自定义的文件夹内。</li></ul><h4 id="使用-osqp">2.2 使用 osqp</h4><p>主要介绍 CMakeLists.txt 文档的编写： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)  </span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)  </span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 osqp 安装目录，不然找不到对应的cmake文件</span></span><br><span class="line"><span class="keyword">find_package</span>(osqp REQUIRED  </span><br><span class="line">             PATHS D:/cppThirdParty/libInstall/osqpLib              </span><br><span class="line">              NO_DEFAULT_PATH)</span><br><span class="line">              </span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#使用静态库 osqp::osqpstatic,对应的是 .a 文件，而不要使用 osqp::osqp</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span> osqp::osqpstatic)</span><br></pre></td></tr></table></figure><strong>注意点：</strong> 1. <code>find_package()</code> 时指定路径； 2.使用静态库 <code>osqp::osqptatic</code>。</p><hr /><h3 id="osqp-eigen-库的编译安装与使用">3. osqp-eigen库的编译安装与使用</h3><ul><li><a href="https://robotology.github.io/osqp-eigen/">osqp-eigen官网</a></li></ul><p>osqp 主要是用 c语言完成，关于矩阵的表示与运算比较底层，所以使用起来很不方便。因此使用在osqp 基础上开发的 osqp-eigen 库会方便很多。其依赖于 osqp 和Eigen，按照上面的常规步骤进行编译可以成功，但在使用时会找不到库文件，问题可以出在这两个地方：1. 因为 osqp 库是安装在自定义目录，所以 osqp-eigen没有找到要使用的库文件。 这里我已经将 osqp-eigen 的相关<code>.cmake</code>文件进行了更改，并且最后编译也通过了，所以问题出在这里的可能性比较小，但由于无法排查，所以在这里也记录一下。2. 编译该库没有生成 <code>.a</code> 文件，只生成了<code>libOsqpEigen.dll.a</code> 和 <code>libOsqpEigen.dll</code>两种库文件。而按照之前在 cmake 中使用的情况，貌似即使是在 windows内，也是需要使用 <code>.a</code> 的库文件，所以怀疑问题出在这里。</p><p>由于始终无法正常使用，所以准备自己将这个库编译一下。</p><h4 id="编译-osqp-eigen-库">3.1 编译 osqp-eigen 库</h4><p>主要使用 cmake 中 <code>add_library()</code>完成静态库编译，下面是详细的 CMakeLists.txt： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)</span><br><span class="line"><span class="keyword">project</span>(osqp_eigen)</span><br><span class="line"><span class="keyword">include_directories</span>(./<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ./src 下面的全部.cpp 文件放到变量 DIR_LIB_SRCS 中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(osqp REQUIRED</span><br><span class="line">        PATHS D:/cppThirdParty/libInstall/osqpLib</span><br><span class="line">        NO_DEFAULT_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(osqp_eigen STATIC <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br><span class="line"><span class="comment"># 链接需要使用的外部库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(osqp_eigen Eigen3::Eigen osqp::osqpstatic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装生成的静态库文件osqp_eigen 至&lt;CMAKE_INSTALL_PREFIX&gt;/lib中，ARCHIVE 代表静态库</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS osqp_eigen ARCHIVE DESTINATION lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将整个 ./include下面的文件夹安装至 &lt;CMAKE_INSTALL_PREFIX&gt;/include中，这里是头文件</span></span><br><span class="line"><span class="keyword">install</span>(DIRECTORY ./<span class="keyword">include</span>/ DESTINATION <span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span><span class="string">&quot;--构建库完成&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>然后按照<a href="/2024/03/aa6722f125a9.html" title="Cmake">常规编译安装步骤</a>就可以将头文件和库文件安装到设定位置了。</p><h4 id="使用-osqp-eigen-库">3.2 使用 osqp-eigen 库</h4><p>这里因为没有写相关的 <code>.cmake</code>配置文件，所以就无法使用相关的 <code>find_package()</code>来自动寻找库文件了，所以手动配置一下，后续再考虑自动查找的设置。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)  </span><br><span class="line"><span class="keyword">project</span>(osqp_eigen)  </span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里在 &lt;CMAKE_PREFIX_PATH&gt; 中添加了osqp安装库的位置，所以下面的 find_package()就不用再重新设置路径了</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_PREFIX_PATH <span class="variable">$&#123;CMAKE_PREFIX_PATH&#125;</span> “D:/cppThirdParty/libInstall/osqpLib”) </span><br><span class="line"><span class="keyword">set</span>(OSQPEIGEN_INCLUDE_DIR D:/cppThirdParty/libInstall/osqpEigenLib/<span class="keyword">include</span>)  </span><br><span class="line"><span class="keyword">set</span>(OSQPEIGEN_LIB_DIR D:/cppThirdParty/libInstall/osqpEigenLib/lib)  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)  </span><br><span class="line"><span class="keyword">find_package</span>(osqp REQUIRED)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OSQPEIGEN_INCLUDE_DIR&#125;</span>)  </span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;OSQPEIGEN_LIB_DIR&#125;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)  </span><br><span class="line"><span class="keyword">target_link_libraries</span>(main libosqp_eigen.a Eigen3::Eigen osqp::osqpstatic)</span><br></pre></td></tr></table></figure><hr /><h3 id="使用例子">4. 使用例子</h3><ul><li><ahref="https://blog.csdn.net/gophae/article/details/115122792">各种优化问题</a></li><li><ahref="https://github.com/robotology/osqp-eigen/blob/master/example/src/MPCExample.cpp">官方example</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;项目 &lt;a href=&quot;https://github.com/reflector-li/EMplanner&quot;&gt;EM
Planner&lt;/a&gt; 中需要使用到 Eigen，osqp以及osqp-eigen库，这里介绍如何在
windows 下编译安装这些基本库的方法；&lt;/li&gt;
&lt;li&gt;这里只进行依赖库安装说明，需要项目还是在 linux
下开发，环境配置会简单很多。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="环境配置日志" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下Ipopt优化库安装</title>
    <link href="http://example.com/2024/03/9aad1447aa31.html"/>
    <id>http://example.com/2024/03/9aad1447aa31.html</id>
    <published>2024-03-11T01:14:00.000Z</published>
    <updated>2024-03-11T01:30:05.361Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Ipopt 是进行非线性优化问题求解的三方库，这里介绍在 Windows环境下的安装方法；</li><li>这里只进行依赖库安装说明，需要项目还是在 linux下开发，环境配置会简单很多。</li></ul><span id="more"></span><h3 id="类unix环境-msys2-mingw-安装">1. 类UNIX环境 MSYS2 / MINGW安装</h3><ul><li><a href="https://www.msys2.org/">官网下载安装</a></li></ul><p><strong>注意！！！</strong> 以下编译 HSL 时出现的问题都是由于运行的是<code>msys2.exe</code> 这个终端，包括找不到 <code>gcc</code>编译器等原因。实际应该使用 <code>mingw64.exe</code> 终端！</p><ul><li>安装其他软件包： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman --disable-download-timeout -S binutils diffutils git grep make patch pkg-config</span><br></pre></td></tr></table></figure></li></ul><p>Note: 这里在安装时可能有些包提示签名未授权，类似这样的提示</p><blockquote><p>error: gcc-libs: signature from "David Macek <ahref="mailto:david.macek.0@gmail.com"class="email">david.macek.0@gmail.com</a>" is unknown trust</p></blockquote><p>这里需要更新一下 Key 就行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman-key --keyserver keyserver.ubuntu.com --refresh-keys</span><br></pre></td></tr></table></figure><ul><li>使用 GNU 编译器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman --disable-download-timeout -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-fortran</span><br></pre></td></tr></table></figure><ul><li>使用 MINGW 时，可以安装对应的 Lapack</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-lapack</span><br></pre></td></tr></table></figure><hr /><h3 id="安装-ipopt-的依赖库">2. 安装 Ipopt 的依赖库</h3><p><ahref="https://coin-or.github.io/Ipopt/index.html">ipopt官网</a></p><ul><li><p>OpenBLAS 直接从 github 的网站上下载二进制文件包即可。对于linux，直接使用apt-get安装。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libopenblas-dev</span><br></pre></td></tr></table></figure></p></li><li><p>LAPACK 已经在前面安装 MinGW 时安装了。</p></li><li><p>HSL 这里使用的是个人免费版本，然后需要在 Msys 中使用源码编译。需要注意的点包括：</p><ol type="1"><li><p>Windows 下的路径表示与 Unix下的表示不同，因此需要进行转换，官方提供了转换工具 <code>cygpath</code>，使用示例： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cygpath - u <span class="string">&quot;D:\ipoptProject\ThirdParty-HSL&quot;</span></span></span><br><span class="line">-</span><br><span class="line">u</span><br><span class="line">/d/ipoptProject/ThirdParty-HSL</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /d/ipoptProject/ThirdParty-HSL</span></span><br></pre></td></tr></table></figure></p></li><li><p>若编译时提示找不到 gcc 编译器，但是在 mingw64/bin中存在编译器，则检查路径是否包括编译器：<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$PATH</span> <span class="comment">#若不包括路径，则添加上去</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">PATH=<span class="variable">$PATH</span>:/mingw64/bin</span></span><br></pre></td></tr></table></figure></p></li></ol></li></ul><hr /><h3 id="编译测试文件">3. 编译测试文件</h3><p>这是 example/examples/hs071_cpp 中 makefile的编译顺序，在终端中按照如此方式进行可正常编译。这里使用的是包管理器<code>pkg-config</code> 去处理需要添加的库路径与库文件。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> g++ -O2 -DNDEBUG  `PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --cflags ipopt`  -c -o hs071_main.o hs071_main.cpp</span><br><span class="line"><span class="number">2.</span> g++ -O2 -DNDEBUG  `PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --cflags ipopt`  -c -o hs071_nlp.o hs071_nlp.cpp</span><br><span class="line"><span class="number">3.</span> g++  -O2 -DNDEBUG  -o hs071_cpp.exe hs071_main.o hs071_nlp.o  `PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --libs ipopt`</span><br></pre></td></tr></table></figure></p><p>其中 <code>pkg-config  --cflags --libs ipopt</code> 命令实际是找到<code>ipopt</code> 库中头文件，库文件所在目录，以及要链接的必要库名称：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --cflags --libs ipopt</span><br><span class="line">-I/mingw64/include/coin-or -I/mingw64/include/coin-or/hsl -I/mingw64/include/coin-or/mumps -L/mingw64/lib -lipopt -lcoinhsl -lcoinmumps -llapack -lblas</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>但是我想直接使用 <code>-o</code>命令生成可执行文件，不需要产生中间文件，于是做了以下尝试： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hs071_nlp.cpp hs071_main.cpp -o main.exe -I. <span class="string">&#x27;PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --cflags --libs ipopt&#x27;</span></span><br></pre></td></tr></table></figure>却会报错如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In file included from hs071_nlp.cpp:<span class="number">7</span>:</span><br><span class="line">hs071_nlp.hpp:<span class="number">10</span>:<span class="number">10</span>: fatal error: IpTNLP.hpp: No such file <span class="keyword">or</span> directory</span><br><span class="line">   <span class="number">10</span> | <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IpTNLP.hpp&quot;</span></span></span><br><span class="line">      |          ^~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">hs071_main.cpp:<span class="number">8</span>:<span class="number">10</span>: fatal error: IpIpoptApplication.hpp: No such file <span class="keyword">or</span> directory</span><br><span class="line">    <span class="number">8</span> | <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IpIpoptApplication.hpp&quot;</span></span></span><br><span class="line">      |          ^~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure></p><p>然后就折腾了一整天，按理来说应该是没有问题的，直到我写这个文档时，才发现了这个问题，原来PKG_CONFIG_PATH=...ipopt 这段配置语句是用 ` ` 括起来的，而不是单引号 ' '。所以正确的语句应该是 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hs071_nlp.cpp hs071_main.cpp -o main.exe -I. `PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig pkg-config --cflags --libs ipopt`</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Ipopt 是进行非线性优化问题求解的三方库，这里介绍在 Windows
环境下的安装方法；&lt;/li&gt;
&lt;li&gt;这里只进行依赖库安装说明，需要项目还是在 linux
下开发，环境配置会简单很多。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="环境配置日志" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows系统迁移笔记</title>
    <link href="http://example.com/2024/03/5a0267b9e9ef.html"/>
    <id>http://example.com/2024/03/5a0267b9e9ef.html</id>
    <published>2024-03-11T01:11:00.000Z</published>
    <updated>2024-03-12T05:10:36.729Z</updated>
    
    <content type="html"><![CDATA[<ul><li>由于笔记本只有一个硬盘位，所以想扩大硬盘容量只能换硬盘。但又不想重装系统及各种软件，所以需要进行系统迁移。希望达到的效果就是原硬盘上的系统和数据全都拷贝到新硬盘上，并且还能够适时的调整各个分区大小。</li></ul><span id="more"></span><h3 id="方法">1. 方法</h3><p>使用<ahref="https://www.abackup.com/download.html">傲梅轻松备份</a>软件。</p><ul><li><p>选择 <code>克隆</code> 下的 <code>磁盘克隆</code>；</p><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20220614225157.png"alt="|600" /><figcaption aria-hidden="true">|600</figcaption></figure></li><li><p>选定 <code>源磁盘</code> 和<code>目标磁盘</code>，选定目标磁盘后会提示清除目标磁盘上数据，因此得提前做好备份。</p></li><li><p>选择左下角<code>编辑分区</code>，可以手动调整克隆到目标磁盘后的各个分区大小。</p></li><li><p>调整分区结束后勾选 <code>SSD对齐</code> ，然后进行克隆。</p></li><li><p>将新的硬盘安装到笔记本上就行，因为无论是引导方式还是硬盘格式都相同，所以并不需要做其他更改，也不需要使用WinPE 系统进行修复。</p></li></ul><hr /><h3 id="参考">2. 参考</h3><ul><li><ahref="https://www.bilibili.com/video/BV1dT4y1S7aY?spm_id_from=333.337.search-card.all.click&amp;vd_source=97148d62a78c37f00cbb88ddd5b68f54">教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;由于笔记本只有一个硬盘位，所以想扩大硬盘容量只能换硬盘。但又不想重装系统及各种软件，所以需要进行系统迁移。希望达到的效果就是原硬盘上的系统和数据全都拷贝到新硬盘上，并且还能够适时的调整各个分区大小。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="环境配置日志" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>VsCode配置使用</title>
    <link href="http://example.com/2024/03/d681f865a872.html"/>
    <id>http://example.com/2024/03/d681f865a872.html</id>
    <published>2024-03-11T00:47:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Vscode 的配置记录，方便在新平台时快速的配置开发环境。</li></ul><span id="more"></span><h3 id="使用cmake编译">1. 使用cmake编译</h3><ol type="1"><li>快速自动创建CMakeLists.txt文件<ul><li><code>ctrl+shift+p</code> 打开控制面板，搜索 <code>cmake</code>，选择 <code>quick start</code>。</li><li>输入项目名，用以配置CMakeList.txt中要求的项目名。</li><li>选择 <code>create an executable</code>，创建可执行文件而不是库文件。</li><li>生成了CMakeLists.txt，然后修改其中内容。</li></ul></li><li>使用底部工具栏的 <code>build</code> 和 <code>run</code>按钮就可以进行编译运行和调试，这里并不需要 <code>launch.json</code> 和<code>task.json</code> 文件，因为是 cmake 编译。会再工作空间自动产生一个build 文件夹。</li></ol>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Vscode 的配置记录，方便在新平台时快速的配置开发环境。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>linux笔记索引</title>
    <link href="http://example.com/2024/03/1267f843f03d.html"/>
    <id>http://example.com/2024/03/1267f843f03d.html</id>
    <published>2024-03-10T11:35:00.000Z</published>
    <updated>2024-03-12T02:49:19.372Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本页面主要存放在ubuntu(linux)使用过程的一系列教程和注意事项的文章索引，方便查找对应文章。</li></ul><span id="more"></span><h3 id="软件教程">1. 软件教程</h3><ul><li><a href="/2024/03/1b808778e65d.html" title="创建Python虚拟环境">创建Python虚拟环境</a></li><li><a href="/2024/03/d3c98baa0d11.html" title="Ubuntu安装卸载软件的各类方法">Ubuntu安装卸载软件的各类方法</a></li><li><a href="/2024/03/773fc7eb7c9a.html" title="AppImage文件创建快捷方式">AppImage文件创建快捷方式</a></li><li><a href="/2024/03/ac15c72d52cb.html" title="Git">Git</a></li><li><a href="/2024/03/1f72a9d2ee08.html" title="Vim">Vim</a></li><li><a href="/2024/03/aa6722f125a9.html" title="Cmake">Cmake</a></li><li><a href="/2024/03/565a36c551fa.html" title="g++编译规则">g++编译规则</a></li><li><a href="/2024/03/1b7d9387f42b.html" title="update-alternatives管理不同版本软件">update-alternatives管理不同版本软件</a></li><li><a href="/2024/03/d681f865a872.html" title="VsCode配置使用">VsCode配置使用</a></li></ul><hr /><h3 id="linux常用命令">2. linux常用命令</h3><ul><li><a href="/2024/03/1875b8f30cd2.html" title="查看文件及文件夹大小">查看文件及文件夹大小</a></li><li><a href="/2024/03/961d865ad079.html" title="删除root权限的文件夹">删除root权限的文件夹</a></li><li><a href="/2024/03/596479257e81.html" title="添加与删除环境变量">添加与删除环境变量</a></li><li><a href="/2024/03/6cba42028c3d.html" title="压缩与解压缩文件夹">压缩与解压缩文件夹</a></li><li><a href="/2024/03/e7d261d37b2f.html" title="内核查看与更改">内核查看与更改</a></li></ul><hr /><h3 id="注意事项">3. 注意事项</h3><ul><li><a href="/2024/03/19dbbdee38e4.html" title="Legacy电脑安装ubuntu注意事项">Legacy电脑安装ubuntu注意事项</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本页面主要存放在ubuntu(linux)使用过程的一系列教程和注意事项的文章索引，方便查找对应文章。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="#linux笔记检索" scheme="http://example.com/tags/linux%E7%AC%94%E8%AE%B0%E6%A3%80%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="http://example.com/2024/03/1f72a9d2ee08.html"/>
    <id>http://example.com/2024/03/1f72a9d2ee08.html</id>
    <published>2024-03-10T11:30:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vim 的一些基本操作方法。</li></ul><span id="more"></span><h3 id="normal-模式">1. Normal 模式</h3><ul><li><code>gg</code> 回到顶行。</li><li><code>G</code> 回到文档末尾。</li><li><code>u</code> 撤回上一步操作。</li><li>查找和替换： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/word #查找文档中所有 word 单词，按 n 向后搜索下一个结果，N 向前搜索。</span><br><span class="line">:s/word/test/ #替换当前行中第一个word为test</span><br><span class="line">:s/word/test/g #替换当前行中所有word为test</span><br><span class="line">:%s/word/test/g #替换全文中所有word为test</span><br></pre></td></tr></table></figure></li><li><code>ctrl+f(forward)</code> 向下翻一页</li><li><code>ctrl+b(backward)</code> 向上翻一页</li><li><code>ctrl+d(down)</code> 向下翻半页</li><li><code>ctrl+u(up)</code> 向上翻半页</li></ul><hr /><h3 id="insert-模式">2. Insert 模式</h3><p>按 <code>i</code> 进入该模式，然后可进行编辑操作</p><hr /><h3 id="visual-模式">3. Visual 模式</h3><p>按 <code>v</code> 进入该模式，可多选字符串进行复制、粘贴和删除操作。- <code>d</code> 删除选择文本 - <code>c</code> 删除选择文本并进入 insert模式 - <code>y</code> 复制 - <code>x</code> 剪切 - <code>p</code>粘贴</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;vim 的一些基本操作方法。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>update-alternatives管理不同版本软件</title>
    <link href="http://example.com/2024/03/1b7d9387f42b.html"/>
    <id>http://example.com/2024/03/1b7d9387f42b.html</id>
    <published>2024-03-10T11:27:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu下使用 <code>update-alternatives</code> 管理不同版本软件，例如<code>cmake</code> ，<code>g++</code>等，避免因完全卸载原软件导致系统配置出错的最佳方式。</li></ul><span id="more"></span><h3 id="相关命令">1. 相关命令</h3><p><strong>以Cmake为例</strong></p><ol type="1"><li><p>安装不同版本cmake，安装到自己目录<code>sudo make install DESTDIR=/home/myDir</code></p></li><li><p>使用update-alternatives创建软连接 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">update-alternatives --install [系统搜索路径] [软件名] [软件实际安装路径] [优先级]</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/cmake cmake /usr/local/bin/cmake 1</span><br></pre></td></tr></table></figure></p></li><li><p>查看某一软件的update-alternatives配置情况，用以查看当前正在使用的版本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --display cmake</span><br></pre></td></tr></table></figure></p></li><li><p>更改软件多个版本 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config cmake</span><br></pre></td></tr></table></figure></p></li><li><p>移除软件某一个版本的配置 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#update-alternatives --remove [软件名] [软件实际安装路径]</span></span></span><br><span class="line">sudo update-alternatives --remove cmake /usr/local/bin/cmake</span><br></pre></td></tr></table></figure></p></li><li><p>移除软件所有配置 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --remove-all cmake</span><br></pre></td></tr></table></figure></p></li></ol><hr /><h3 id="参考">2. 参考</h3><ul><li><ahref="https://blog.csdn.net/JasonDing1354/article/details/50470109">使用update-alternatives命令进行版本的切换</a></li><li><ahref="https://blog.csdn.net/hellocsz/article/details/82701689?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-82701689-blog-50470109.pc_relevant_downloadblacklistv1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-82701689-blog-50470109.pc_relevant_downloadblacklistv1&amp;utm_relevant_index=1">linux软件版本管理命令update-alternatives使用详解</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu下使用 &lt;code&gt;update-alternatives&lt;/code&gt; 管理不同版本软件，例如
&lt;code&gt;cmake&lt;/code&gt; ，&lt;code&gt;g++&lt;/code&gt;
等，避免因完全卸载原软件导致系统配置出错的最佳方式。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2024/03/ac15c72d52cb.html"/>
    <id>http://example.com/2024/03/ac15c72d52cb.html</id>
    <published>2024-03-10T11:10:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>git 的一系列基本操作；</li><li>解析 git 的设计原理，包括 <code>git merge</code> 和<code>git rebase</code> 等；</li></ul><span id="more"></span><h3 id="分支">1. 分支</h3><h4 id="查看分支">1.1 查看分支</h4><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch # 查看本地分支</span><br><span class="line">git branch -r  #查看远程分支</span><br><span class="line">git branch -a #查看所有分支，红色为远程</span><br></pre></td></tr></table></figure></p><h4 id="切换分支">1.2 切换分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch] #切换到已有分支</span><br><span class="line">git checkout -b [newbranch] #创建并切换到新分支</span><br></pre></td></tr></table></figure><h4 id="推送分支到远端">1.3 推送分支到远端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin [newbranch] #首次推送分支到远端，之后直接使用 git push origin [newbranch] 即可</span><br></pre></td></tr></table></figure><h4 id="删除分支">1.4 删除分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch] #删除远端分支</span><br><span class="line">git branch -D [branch] #删除本地分支</span><br></pre></td></tr></table></figure><h4 id="清空远程分支方法">1.5 清空远程分支方法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . #清除本地缓存</span><br><span class="line">git commit -m&quot;delete&quot;</span><br><span class="line">git push origin main </span><br></pre></td></tr></table></figure><table style="width:7%;"><colgroup><col style="width: 6%" /></colgroup><tbody><tr class="odd"><td>### 2. 克隆 #### 2.1 克隆特定分支文件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b [branch] [仓库链接] </span><br></pre></td></tr></table></figure></td></tr><tr class="even"><td>#### 2.2 一次性批量克隆仓库到本地 使用 <code>vcs</code>命令实现批量下载，例如某 <code>build_depends.repos</code> 文件内容如下<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">repositories:</span><br><span class="line">  common:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://gitlab.com/autowarefoundation/autoware.ai/common.git</span><br><span class="line">    version: master</span><br><span class="line">  lanelet2:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://github.com/fzi-forschungszentrum-informatik/Lanelet2.git</span><br><span class="line">    version: master</span><br><span class="line">  messages:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://gitlab.com/autowarefoundation/autoware.ai/messages.git</span><br><span class="line">    version: master</span><br><span class="line">  mrt_cmake_modules:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://github.com/KIT-MRT/mrt_cmake_modules.git</span><br><span class="line">    version: master</span><br></pre></td></tr></table></figure></td></tr><tr class="odd"><td>在同级文件夹下使用命令： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs <span class="keyword">import</span> ..&lt;&lt;build_depends.repos</span><br></pre></td></tr></table></figure>将文件中的仓库批量下载至上一级文件夹 <code>..</code> 当中。</td></tr></tbody></table><h3 id="忽略文件或文件夹">3. 忽略文件或文件夹</h3><ul><li><p>在git工作空间下创建 <code>.gitignore</code> 文件（注意不是在<code>.git</code> 文件夹下创建），若要忽略 <code>build</code> 和<code>.vscode</code> 文件夹，则可以在 <code>.gitignore</code> 中写道：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.gitignore文件内容</span></span><br><span class="line">build</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure></p></li><li><p>若要忽略的文件已经添加到缓存区，删除 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git ls-files #缓存查看</span><br><span class="line">git rm -r --cached [要忽略文件夹]</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交描述&quot;</span><br></pre></td></tr></table></figure></p></li></ul><hr /><h3 id="git-merge-相关操作">4. git merge 相关操作</h3><ul><li><code>--ff</code></li><li><code>--no-ff</code></li></ul><hr /><h3 id="git-merge-和-git-rebase-区别">5. git merge 和 git rebase区别</h3><p>两种方式都是合并分支，但是有差别。 #### 5.1 git merge 1.<strong>简介：</strong> git merge 合并以后，两个分支的commit信息还各自按照时间线保留，只不过是一种交叉方式的合并，在 git树中存在交叉。 2. <strong>使用场景：</strong> 由各自的 feature 分支向develop 分支合并。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge --no-ff develop </span><br></pre></td></tr></table></figure></p><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230714003355.png"alt="image.png|400" /><figcaption aria-hidden="true">image.png|400</figcaption></figure><h4 id="git-rebase">5.2 git rebase</h4><ol type="1"><li><strong>简介：</strong> 顾名思义，就是重新选择基础，也就是重新选择rebase的分支为基础，然后达到一个线性合并的方式。会找到两个分支的上一个共有commit，然后插入 rebase 分支的新 commit 。</li><li><strong>使用场景：</strong>在本地清理自己的各种分支，主打一个简洁，并不需要多关注以前的 commit时间和信息。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure></li></ol><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230714003932.png"alt="image.png|400" /><figcaption aria-hidden="true">image.png|400</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;git 的一系列基本操作；&lt;/li&gt;
&lt;li&gt;解析 git 的设计原理，包括 &lt;code&gt;git merge&lt;/code&gt; 和
&lt;code&gt;git rebase&lt;/code&gt; 等；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>g++编译规则</title>
    <link href="http://example.com/2024/03/565a36c551fa.html"/>
    <id>http://example.com/2024/03/565a36c551fa.html</id>
    <published>2024-03-10T09:10:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>直接使用 g++ 编译 cpp源码的基本方法；</li></ul><span id="more"></span><h3 id="基本规则">1. 基本规则</h3><h4 id="参数">1.1 参数</h4><ul><li><p><code>-c</code> :生成目标文件，只编译不链接，即链接库文件之前的文件，后缀一般为<code>.o</code> 。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c main.cpp <span class="comment">// 会生成 main.o 的目标文件</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>-o</code>：生成可执行文件。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o main main.cpp -L. -lstaticlib <span class="comment">// 利用源文件 main.cpp 与./ 中的库文件一起生成可执行文件 main</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>-L</code>: 要链接的库文件所在目录。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-L. <span class="comment">//库在当前目录</span></span><br><span class="line">-L/usr/lib</span><br></pre></td></tr></table></figure></p></li><li><p><code>-l</code>:需要链接的<strong>库的名称</strong>。注意不是库文件名称，例如<code>libtest.a</code> 是静态库文件名称，其 对应的库名称为<code>test</code>。因为在 linux 中编译时库文件的命名为<code>lib[库名称].a</code> 或者 <code>lib[库名称].so</code>，前者为静态库，后者为动态库。</p></li><li><p><code>-I</code>: 指定头文件目录。可以使用相对路径，即：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-I./include</span><br><span class="line">-I/usr/include</span><br></pre></td></tr></table></figure></p></li><li><p><code>-shared</code>：指定生成动态库。</p></li><li><p><code>-fPIC</code> ： 表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。</p></li></ul><hr /><h3 id="使用示例">2. 使用示例</h3><p>在[[Ipopt优化库安装#编译测试文件]] 中有大量实例显示如何用 g++编译。</p><ul><li>创建静态库文件。<ol type="1"><li><p>先生成目标文件： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c file1.cpp  </span><br></pre></td></tr></table></figure></p></li><li><p>利用目标文件创建静态库。其中静态库名字为<code>xxxx</code>，库文件名字为 <code>libxxxx.a</code>。在生成可执行文件时需要用 <code>-lxxxx</code> 。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar  cqs  libxxxx.a  xx1.o xx2.o xx3.o</span><br></pre></td></tr></table></figure></p></li></ol></li><li>创建动态库文件：<ol type="1"><li>直接利用源文件生成动态库文件。库名称和库文件名称区别如上。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -fPIC -shared -o libxxxx.so xx1.cpp xx2.cpp xx3.cpp</span><br></pre></td></tr></table></figure></li></ol></li><li>链接库文件，创建可执行文件。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o main main.cpp -LfilePath -lxxxx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;直接使用 g++ 编译 cpp源码的基本方法；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Cmake</title>
    <link href="http://example.com/2024/03/aa6722f125a9.html"/>
    <id>http://example.com/2024/03/aa6722f125a9.html</id>
    <published>2024-03-10T09:05:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>windows 中使用cmake编译程序方法；</li><li>CMakeLists.txt 撰写方法，控制程序的安装、查找；</li><li>linux中使用 <code>update-alternatives</code> 更新 cmake；</li></ul><span id="more"></span><h3 id="在-windows-下使用-cmake-编译安装库文件">1. 在 windows 下使用cmake 编译安装库文件</h3><ol type="1"><li>在源代码文件下新建 <code>build</code> 文件夹并进入，利用 cmake 构建makefile 文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -G &quot;MinGW Makefiles&quot; -DCMAKE_INSTALL_PREFIX:PATH=D:/first/second ..</span><br></pre></td></tr></table></figure><ul><li>需要用 <code>-G</code> 指定编译链，其中包含了 <code>g++</code> 和<code>gcc</code> 等工具；<br /></li><li><code>-DCMAKE_INSTALL_PREFIX:PATH=D:/first/second</code>指定了安装文件夹</li><li><code>..</code> 表示 <code>CmakeLists.txt</code>文件在上一层目录下</li></ul><ol start="2" type="1"><li>在 <code>build</code> 文件夹中，使用 cmake 编译文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build .</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>紧接着安装库文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build . --target install</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>当想卸载库文件时执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build . --target uninstall</span><br></pre></td></tr></table></figure><hr /><h3 id="编写-cmakelists.txt">2. 编写 CMakelists.txt</h3><ol type="1"><li>为自己的库创建 <code>.make</code> 配置文件，使得<code>find_package()</code> 可以找到</li></ol><hr /><h3 id="ubuntu下升级-cmake-的方式">3. ubuntu下升级 cmake 的方式</h3><ul><li><ahref="https://blog.csdn.net/qq_27350133/article/details/121994229">正确升级方法</a></li></ul><hr /><h3 id="参考">4. 参考</h3><ul><li><ahref="https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables">cmake系统变量</a></li><li><ahref="https://blog.csdn.net/weixin_42398658/article/details/121676525">cmake动态库与静态库安装</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;windows 中使用cmake编译程序方法；&lt;/li&gt;
&lt;li&gt;CMakeLists.txt 撰写方法，控制程序的安装、查找；&lt;/li&gt;
&lt;li&gt;linux中使用 &lt;code&gt;update-alternatives&lt;/code&gt; 更新 cmake；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>AppImage文件创建快捷方式</title>
    <link href="http://example.com/2024/03/773fc7eb7c9a.html"/>
    <id>http://example.com/2024/03/773fc7eb7c9a.html</id>
    <published>2024-03-10T08:54:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu 中配置 <code>AppImage</code>文件，并在菜单中显示应用图标的方法；</li><li>解决启动后侧边栏两个图标问题；</li></ul><span id="more"></span><h3 id="配置方法">1. 配置方法</h3><p>这里以 marktext 软件为例： 首先需要将 <code>AppImage</code>文件的权限改为以<strong>可执行文件运行</strong>！（右键属性） 1. 解压AppImage 文件，解压后文件存放于 <code>squashfs-root</code>，将其重命名为 <code>marktext</code>。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./marktext-x86_64.AppImage --appimage-extract</span><br></pre></td></tr></table></figure></p><ol start="2" type="1"><li>在以下目录创建启动文件 <code>obsidian.desktop</code></li></ol><blockquote><p>/home/linkx/.local/share/applications</p></blockquote><p>内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Obsidian</span><br><span class="line">Comment=Aplicación de mensajería</span><br><span class="line">Exec=/home/linkx/Software/obsidian/Obsidian.AppImage #应用程序位置</span><br><span class="line">Icon=/home/linkx/Software/obsidian/squashfs-root/obsidian.png #图标位置</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Internet;</span><br></pre></td></tr></table></figure><hr /><h3 id="app-启动后侧边栏有两个图标">2. APP 启动后侧边栏有两个图标</h3><p>先打开应用，然后终端运行命令 <code>xprop WM_CLASS</code>。此时鼠标变成加号，使用鼠标点击应用窗口，得到终端输出：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xprop WM_CLASS</span></span><br><span class="line">WM_CLASS(STRING) = &quot;obsidian&quot;, &quot;obsidian&quot;</span><br></pre></td></tr></table></figure></p><p>然后修改桌面启动文件，例如<code>Obsidian.desktop</code>，添加一行内容，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Obsidian</span><br><span class="line">Comment=Aplicación de mensajería</span><br><span class="line">Exec=//home/linkx/Software/obsidian/Obsidian.AppImage</span><br><span class="line">Icon=/home/linkx/Software/obsidian/squashfs-root/obsidian.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Internet;</span><br><span class="line">StartupWMClass=obsidian #添加内容</span><br></pre></td></tr></table></figure></p><p>重启即可。</p><hr /><h3 id="参考">3. 参考</h3><ul><li><ahref="https://blog.csdn.net/halloworldd/article/details/93497608">参考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu 中配置 &lt;code&gt;AppImage&lt;/code&gt;
文件，并在菜单中显示应用图标的方法；&lt;/li&gt;
&lt;li&gt;解决启动后侧边栏两个图标问题；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>终端常用快捷键操作</title>
    <link href="http://example.com/2024/03/44a6a49c3ff4.html"/>
    <id>http://example.com/2024/03/44a6a49c3ff4.html</id>
    <published>2024-03-10T08:46:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基础操作 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctrl + a #移动到行首</span><br><span class="line">ctrl + e(end) #移动到行尾</span><br><span class="line"></span><br><span class="line">ctrl + k #删除至末尾元素</span><br><span class="line">ctrl + u #删除至开头元素</span><br><span class="line">ctrl + w(word) #剪切左边第一个单词</span><br><span class="line"></span><br><span class="line">ctrl + y(yank) #粘贴剪切的单词</span><br><span class="line"></span><br><span class="line">alt + f(forward) #往后移动一个单词</span><br><span class="line">alt + b(backward) #往前移动一个单词</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li>反向搜索 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + r（reverse） #输入文字搜索历史记录</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="comment">#right_arrow 退出反向搜索模式</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;基础操作 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctrl + a #移动到行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + e(end) #移动到行尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + k #删除至末尾元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + u #删除至开头元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + w(word) #剪切左边第一个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + y(yank) #粘贴剪切的单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alt + f(forward) #往后移动一个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alt + b(backward) #往前移动一个单词&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>压缩与解压缩文件夹</title>
    <link href="http://example.com/2024/03/6cba42028c3d.html"/>
    <id>http://example.com/2024/03/6cba42028c3d.html</id>
    <published>2024-03-10T08:44:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>.tar</code>，<code>.tar.gz</code> ，<code>.bz2</code> 和<code>.zip</code> 文件的压缩和解压方法。</li></ul><span id="more"></span><h3 id="tar-文件的压缩与解压">1. <code>.tar</code> 文件的压缩与解压</h3><p><strong>1. 压缩</strong></p><p>以 test 文件夹为例，压缩为 <code>test.tar</code> 压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：tar -vcf 打包后的文件名(xxx.tar) 需要打包的文件夹(xxx)</span></span><br><span class="line">tar -vcf test.tar test</span><br></pre></td></tr></table></figure><p><strong>2. 解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vxf 打包后的文件名(xxx.tar)</span></span><br><span class="line">tar -vxf test.tar</span><br></pre></td></tr></table></figure><hr /><h3 id="tar.gz-文件的压缩与解压">2. <code>.tar.gz</code>文件的压缩与解压</h3><p><strong>1. 压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vczf 打包压缩后的文件名(xxx.tar.gz) 需要打包的文件夹(xxx)</span></span><br><span class="line">tar -vczf test.tar.gz test</span><br></pre></td></tr></table></figure></p><p><strong>2. 解压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vxzf 打包压缩后的文件名(xxx.tar.gz)</span></span><br><span class="line">tar -vxzf test.tar.gz</span><br></pre></td></tr></table></figure></p><hr /><h3 id="bz2-文件的压缩">3. <code>.bz2</code> 文件的压缩</h3><p><strong>1. 压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -z test</span><br></pre></td></tr></table></figure></p><p><strong>2. 解压</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d test.bz2</span><br></pre></td></tr></table></figure></p><h3 id="zip-文件的压缩与解压">4. <code>.zip</code> 文件的压缩与解压</h3><p><strong>1. 压缩</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：zip 打包压缩的文件名(xxx.zip) 需要打包的文件夹(xxx)</span></span><br><span class="line">zip test.zip test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">递归处理，即将子文件夹也一并压缩</span></span><br><span class="line">zip -r test.zip test</span><br></pre></td></tr></table></figure><p><strong>2. 解压</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式： unzip xxxx.zip</span></span><br><span class="line">unzip test.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用 -d 命令解压到指定目录</span></span><br><span class="line">unzip test.zip -d /target_folder </span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.tar&lt;/code&gt;，&lt;code&gt;.tar.gz&lt;/code&gt; ，&lt;code&gt;.bz2&lt;/code&gt; 和
&lt;code&gt;.zip&lt;/code&gt; 文件的压缩和解压方法。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>添加与删除环境变量</title>
    <link href="http://example.com/2024/03/596479257e81.html"/>
    <id>http://example.com/2024/03/596479257e81.html</id>
    <published>2024-03-10T08:43:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu 中添加环境变量与删除环境变量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="comment">// 查看所有环境变量</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加环境变量</span></span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> GOPATH=/home/gopath</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除环境变量</span></span><br><span class="line"><span class="keyword">export</span> -n  GOPATH</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu 中添加环境变量与删除环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
