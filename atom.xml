<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinkX的技术站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-11T00:51:43.637Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LinkX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VsCode配置使用</title>
    <link href="http://example.com/2024/03/d681f865a872.html"/>
    <id>http://example.com/2024/03/d681f865a872.html</id>
    <published>2024-03-11T00:47:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Vscode 的配置记录，方便在新平台时快速的配置开发环境。</li></ul><span id="more"></span><h3 id="使用cmake编译">1. 使用cmake编译</h3><ol type="1"><li>快速自动创建CMakeLists.txt文件<ul><li><code>ctrl+shift+p</code> 打开控制面板，搜索 <code>cmake</code>，选择 <code>quick start</code>。</li><li>输入项目名，用以配置CMakeList.txt中要求的项目名。</li><li>选择 <code>create an executable</code>，创建可执行文件而不是库文件。</li><li>生成了CMakeLists.txt，然后修改其中内容。</li></ul></li><li>使用底部工具栏的 <code>build</code> 和 <code>run</code>按钮就可以进行编译运行和调试，这里并不需要 <code>launch.json</code> 和<code>task.json</code> 文件，因为是 cmake 编译。会再工作空间自动产生一个build 文件夹。</li></ol>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Vscode 的配置记录，方便在新平台时快速的配置开发环境。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>README</title>
    <link href="http://example.com/2024/03/f2d08d879624.html"/>
    <id>http://example.com/2024/03/f2d08d879624.html</id>
    <published>2024-03-10T11:35:00.000Z</published>
    <updated>2024-03-11T00:53:09.303Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本仓库主要存放在ubuntu(linux)使用过程的一系列教程和注意事项。</li></ul><span id="more"></span><h3 id="软件教程">1. 软件教程</h3><ul><li><a href="/2024/03/1b808778e65d.html" title="创建Python虚拟环境">创建Python虚拟环境</a></li><li><a href="/2024/03/d3c98baa0d11.html" title="Ubuntu安装卸载软件的各类方法">Ubuntu安装卸载软件的各类方法</a></li><li><a href="/2024/03/773fc7eb7c9a.html" title="AppImage文件创建快捷方式">AppImage文件创建快捷方式</a></li><li><a href="/2024/03/ac15c72d52cb.html" title="Git">Git</a></li><li><a href="/2024/03/1f72a9d2ee08.html" title="Vim">Vim</a></li><li><a href="/2024/03/aa6722f125a9.html" title="Cmake">Cmake</a></li><li><a href="/2024/03/565a36c551fa.html" title="g++编译规则">g++编译规则</a></li><li><a href="/2024/03/1b7d9387f42b.html" title="update-alternatives管理不同版本软件">update-alternatives管理不同版本软件</a></li><li><a href="/2024/03/d681f865a872.html" title="VsCode配置使用">VsCode配置使用</a></li></ul><hr /><h3 id="linux常用命令">2. linux常用命令</h3><ul><li><a href="/2024/03/1875b8f30cd2.html" title="查看文件及文件夹大小">查看文件及文件夹大小</a></li><li><a href="/2024/03/961d865ad079.html" title="删除root权限的文件夹">删除root权限的文件夹</a></li><li><a href="/2024/03/596479257e81.html" title="添加与删除环境变量">添加与删除环境变量</a></li><li><a href="/2024/03/6cba42028c3d.html" title="压缩与解压缩文件夹">压缩与解压缩文件夹</a></li><li><a href="/2024/03/e7d261d37b2f.html" title="内核查看与更改">内核查看与更改</a></li></ul><hr /><h3 id="注意事项">3. 注意事项</h3><ul><li><a href="/2024/03/19dbbdee38e4.html" title="Legacy电脑安装ubuntu注意事项">Legacy电脑安装ubuntu注意事项</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本仓库主要存放在ubuntu(linux)使用过程的一系列教程和注意事项。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="#linux笔记检索" scheme="http://example.com/tags/linux%E7%AC%94%E8%AE%B0%E6%A3%80%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="http://example.com/2024/03/1f72a9d2ee08.html"/>
    <id>http://example.com/2024/03/1f72a9d2ee08.html</id>
    <published>2024-03-10T11:30:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vim 的一些基本操作方法。</li></ul><span id="more"></span><h3 id="normal-模式">1. Normal 模式</h3><ul><li><code>gg</code> 回到顶行。</li><li><code>G</code> 回到文档末尾。</li><li><code>u</code> 撤回上一步操作。</li><li>查找和替换： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/word #查找文档中所有 word 单词，按 n 向后搜索下一个结果，N 向前搜索。</span><br><span class="line">:s/word/test/ #替换当前行中第一个word为test</span><br><span class="line">:s/word/test/g #替换当前行中所有word为test</span><br><span class="line">:%s/word/test/g #替换全文中所有word为test</span><br></pre></td></tr></table></figure></li><li><code>ctrl+f(forward)</code> 向下翻一页</li><li><code>ctrl+b(backward)</code> 向上翻一页</li><li><code>ctrl+d(down)</code> 向下翻半页</li><li><code>ctrl+u(up)</code> 向上翻半页</li></ul><hr /><h3 id="insert-模式">2. Insert 模式</h3><p>按 <code>i</code> 进入该模式，然后可进行编辑操作</p><hr /><h3 id="visual-模式">3. Visual 模式</h3><p>按 <code>v</code> 进入该模式，可多选字符串进行复制、粘贴和删除操作。- <code>d</code> 删除选择文本 - <code>c</code> 删除选择文本并进入 insert模式 - <code>y</code> 复制 - <code>x</code> 剪切 - <code>p</code>粘贴</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;vim 的一些基本操作方法。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>update-alternatives管理不同版本软件</title>
    <link href="http://example.com/2024/03/1b7d9387f42b.html"/>
    <id>http://example.com/2024/03/1b7d9387f42b.html</id>
    <published>2024-03-10T11:27:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu下使用 <code>update-alternatives</code> 管理不同版本软件，例如<code>cmake</code> ，<code>g++</code>等，避免因完全卸载原软件导致系统配置出错的最佳方式。</li></ul><span id="more"></span><h3 id="相关命令">1. 相关命令</h3><p><strong>以Cmake为例</strong></p><ol type="1"><li><p>安装不同版本cmake，安装到自己目录<code>sudo make install DESTDIR=/home/myDir</code></p></li><li><p>使用update-alternatives创建软连接 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">update-alternatives --install [系统搜索路径] [软件名] [软件实际安装路径] [优先级]</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/cmake cmake /usr/local/bin/cmake 1</span><br></pre></td></tr></table></figure></p></li><li><p>查看某一软件的update-alternatives配置情况，用以查看当前正在使用的版本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --display cmake</span><br></pre></td></tr></table></figure></p></li><li><p>更改软件多个版本 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config cmake</span><br></pre></td></tr></table></figure></p></li><li><p>移除软件某一个版本的配置 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#update-alternatives --remove [软件名] [软件实际安装路径]</span></span></span><br><span class="line">sudo update-alternatives --remove cmake /usr/local/bin/cmake</span><br></pre></td></tr></table></figure></p></li><li><p>移除软件所有配置 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --remove-all cmake</span><br></pre></td></tr></table></figure></p></li></ol><hr /><h3 id="参考">2. 参考</h3><ul><li><ahref="https://blog.csdn.net/JasonDing1354/article/details/50470109">使用update-alternatives命令进行版本的切换</a></li><li><ahref="https://blog.csdn.net/hellocsz/article/details/82701689?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-82701689-blog-50470109.pc_relevant_downloadblacklistv1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-82701689-blog-50470109.pc_relevant_downloadblacklistv1&amp;utm_relevant_index=1">linux软件版本管理命令update-alternatives使用详解</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu下使用 &lt;code&gt;update-alternatives&lt;/code&gt; 管理不同版本软件，例如
&lt;code&gt;cmake&lt;/code&gt; ，&lt;code&gt;g++&lt;/code&gt;
等，避免因完全卸载原软件导致系统配置出错的最佳方式。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2024/03/ac15c72d52cb.html"/>
    <id>http://example.com/2024/03/ac15c72d52cb.html</id>
    <published>2024-03-10T11:10:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>git 的一系列基本操作；</li><li>解析 git 的设计原理，包括 <code>git merge</code> 和<code>git rebase</code> 等；</li></ul><span id="more"></span><h3 id="分支">1. 分支</h3><h4 id="查看分支">1.1 查看分支</h4><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch # 查看本地分支</span><br><span class="line">git branch -r  #查看远程分支</span><br><span class="line">git branch -a #查看所有分支，红色为远程</span><br></pre></td></tr></table></figure></p><h4 id="切换分支">1.2 切换分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch] #切换到已有分支</span><br><span class="line">git checkout -b [newbranch] #创建并切换到新分支</span><br></pre></td></tr></table></figure><h4 id="推送分支到远端">1.3 推送分支到远端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin [newbranch] #首次推送分支到远端，之后直接使用 git push origin [newbranch] 即可</span><br></pre></td></tr></table></figure><h4 id="删除分支">1.4 删除分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch] #删除远端分支</span><br><span class="line">git branch -D [branch] #删除本地分支</span><br></pre></td></tr></table></figure><h4 id="清空远程分支方法">1.5 清空远程分支方法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . #清除本地缓存</span><br><span class="line">git commit -m&quot;delete&quot;</span><br><span class="line">git push origin main </span><br></pre></td></tr></table></figure><table style="width:7%;"><colgroup><col style="width: 6%" /></colgroup><tbody><tr class="odd"><td>### 2. 克隆 #### 2.1 克隆特定分支文件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b [branch] [仓库链接] </span><br></pre></td></tr></table></figure></td></tr><tr class="even"><td>#### 2.2 一次性批量克隆仓库到本地 使用 <code>vcs</code>命令实现批量下载，例如某 <code>build_depends.repos</code> 文件内容如下<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">repositories:</span><br><span class="line">  common:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://gitlab.com/autowarefoundation/autoware.ai/common.git</span><br><span class="line">    version: master</span><br><span class="line">  lanelet2:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://github.com/fzi-forschungszentrum-informatik/Lanelet2.git</span><br><span class="line">    version: master</span><br><span class="line">  messages:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://gitlab.com/autowarefoundation/autoware.ai/messages.git</span><br><span class="line">    version: master</span><br><span class="line">  mrt_cmake_modules:</span><br><span class="line">    type: git</span><br><span class="line">    url: https://github.com/KIT-MRT/mrt_cmake_modules.git</span><br><span class="line">    version: master</span><br></pre></td></tr></table></figure></td></tr><tr class="odd"><td>在同级文件夹下使用命令： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs <span class="keyword">import</span> ..&lt;&lt;build_depends.repos</span><br></pre></td></tr></table></figure>将文件中的仓库批量下载至上一级文件夹 <code>..</code> 当中。</td></tr></tbody></table><h3 id="忽略文件或文件夹">3. 忽略文件或文件夹</h3><ul><li><p>在git工作空间下创建 <code>.gitignore</code> 文件（注意不是在<code>.git</code> 文件夹下创建），若要忽略 <code>build</code> 和<code>.vscode</code> 文件夹，则可以在 <code>.gitignore</code> 中写道：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.gitignore文件内容</span></span><br><span class="line">build</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure></p></li><li><p>若要忽略的文件已经添加到缓存区，删除 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git ls-files #缓存查看</span><br><span class="line">git rm -r --cached [要忽略文件夹]</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交描述&quot;</span><br></pre></td></tr></table></figure></p></li></ul><hr /><h3 id="git-merge-相关操作">4. git merge 相关操作</h3><ul><li><code>--ff</code></li><li><code>--no-ff</code></li></ul><hr /><h3 id="git-merge-和-git-rebase-区别">5. git merge 和 git rebase区别</h3><p>两种方式都是合并分支，但是有差别。 #### 5.1 git merge 1.<strong>简介：</strong> git merge 合并以后，两个分支的commit信息还各自按照时间线保留，只不过是一种交叉方式的合并，在 git树中存在交叉。 2. <strong>使用场景：</strong> 由各自的 feature 分支向develop 分支合并。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge --no-ff develop </span><br></pre></td></tr></table></figure></p><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230714003355.png"alt="image.png|400" /><figcaption aria-hidden="true">image.png|400</figcaption></figure><h4 id="git-rebase">5.2 git rebase</h4><ol type="1"><li><strong>简介：</strong> 顾名思义，就是重新选择基础，也就是重新选择rebase的分支为基础，然后达到一个线性合并的方式。会找到两个分支的上一个共有commit，然后插入 rebase 分支的新 commit 。</li><li><strong>使用场景：</strong>在本地清理自己的各种分支，主打一个简洁，并不需要多关注以前的 commit时间和信息。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure></li></ol><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230714003932.png"alt="image.png|400" /><figcaption aria-hidden="true">image.png|400</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;git 的一系列基本操作；&lt;/li&gt;
&lt;li&gt;解析 git 的设计原理，包括 &lt;code&gt;git merge&lt;/code&gt; 和
&lt;code&gt;git rebase&lt;/code&gt; 等；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>g++编译规则</title>
    <link href="http://example.com/2024/03/565a36c551fa.html"/>
    <id>http://example.com/2024/03/565a36c551fa.html</id>
    <published>2024-03-10T09:10:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>直接使用 g++ 编译 cpp源码的基本方法；</li></ul><span id="more"></span><h3 id="基本规则">1. 基本规则</h3><h4 id="参数">1.1 参数</h4><ul><li><p><code>-c</code> :生成目标文件，只编译不链接，即链接库文件之前的文件，后缀一般为<code>.o</code> 。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c main.cpp <span class="comment">// 会生成 main.o 的目标文件</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>-o</code>：生成可执行文件。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o main main.cpp -L. -lstaticlib <span class="comment">// 利用源文件 main.cpp 与./ 中的库文件一起生成可执行文件 main</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>-L</code>: 要链接的库文件所在目录。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-L. <span class="comment">//库在当前目录</span></span><br><span class="line">-L/usr/lib</span><br></pre></td></tr></table></figure></p></li><li><p><code>-l</code>:需要链接的<strong>库的名称</strong>。注意不是库文件名称，例如<code>libtest.a</code> 是静态库文件名称，其 对应的库名称为<code>test</code>。因为在 linux 中编译时库文件的命名为<code>lib[库名称].a</code> 或者 <code>lib[库名称].so</code>，前者为静态库，后者为动态库。</p></li><li><p><code>-I</code>: 指定头文件目录。可以使用相对路径，即：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-I./include</span><br><span class="line">-I/usr/include</span><br></pre></td></tr></table></figure></p></li><li><p><code>-shared</code>：指定生成动态库。</p></li><li><p><code>-fPIC</code> ： 表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。</p></li></ul><hr /><h3 id="使用示例">2. 使用示例</h3><p>在[[Ipopt优化库安装#编译测试文件]] 中有大量实例显示如何用 g++编译。</p><ul><li>创建静态库文件。<ol type="1"><li><p>先生成目标文件： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c file1.cpp  </span><br></pre></td></tr></table></figure></p></li><li><p>利用目标文件创建静态库。其中静态库名字为<code>xxxx</code>，库文件名字为 <code>libxxxx.a</code>。在生成可执行文件时需要用 <code>-lxxxx</code> 。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar  cqs  libxxxx.a  xx1.o xx2.o xx3.o</span><br></pre></td></tr></table></figure></p></li></ol></li><li>创建动态库文件：<ol type="1"><li>直接利用源文件生成动态库文件。库名称和库文件名称区别如上。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -fPIC -shared -o libxxxx.so xx1.cpp xx2.cpp xx3.cpp</span><br></pre></td></tr></table></figure></li></ol></li><li>链接库文件，创建可执行文件。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o main main.cpp -LfilePath -lxxxx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;直接使用 g++ 编译 cpp源码的基本方法；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Cmake</title>
    <link href="http://example.com/2024/03/aa6722f125a9.html"/>
    <id>http://example.com/2024/03/aa6722f125a9.html</id>
    <published>2024-03-10T09:05:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>windows 中使用cmake编译程序方法；</li><li>CMakeLists.txt 撰写方法，控制程序的安装、查找；</li><li>linux中使用 <code>update-alternatives</code> 更新 cmake；</li></ul><span id="more"></span><h3 id="在-windows-下使用-cmake-编译安装库文件">1. 在 windows 下使用cmake 编译安装库文件</h3><ol type="1"><li>在源代码文件下新建 <code>build</code> 文件夹并进入，利用 cmake 构建makefile 文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -G &quot;MinGW Makefiles&quot; -DCMAKE_INSTALL_PREFIX:PATH=D:/first/second ..</span><br></pre></td></tr></table></figure><ul><li>需要用 <code>-G</code> 指定编译链，其中包含了 <code>g++</code> 和<code>gcc</code> 等工具；<br /></li><li><code>-DCMAKE_INSTALL_PREFIX:PATH=D:/first/second</code>指定了安装文件夹</li><li><code>..</code> 表示 <code>CmakeLists.txt</code>文件在上一层目录下</li></ul><ol start="2" type="1"><li>在 <code>build</code> 文件夹中，使用 cmake 编译文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build .</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>紧接着安装库文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build . --target install</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>当想卸载库文件时执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build . --target uninstall</span><br></pre></td></tr></table></figure><hr /><h3 id="编写-cmakelists.txt">2. 编写 CMakelists.txt</h3><ol type="1"><li>为自己的库创建 <code>.make</code> 配置文件，使得<code>find_package()</code> 可以找到</li></ol><hr /><h3 id="ubuntu下升级-cmake-的方式">3. ubuntu下升级 cmake 的方式</h3><ul><li><ahref="https://blog.csdn.net/qq_27350133/article/details/121994229">正确升级方法</a></li></ul><hr /><h3 id="参考">4. 参考</h3><ul><li><ahref="https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables">cmake系统变量</a></li><li><ahref="https://blog.csdn.net/weixin_42398658/article/details/121676525">cmake动态库与静态库安装</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;windows 中使用cmake编译程序方法；&lt;/li&gt;
&lt;li&gt;CMakeLists.txt 撰写方法，控制程序的安装、查找；&lt;/li&gt;
&lt;li&gt;linux中使用 &lt;code&gt;update-alternatives&lt;/code&gt; 更新 cmake；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>AppImage文件创建快捷方式</title>
    <link href="http://example.com/2024/03/773fc7eb7c9a.html"/>
    <id>http://example.com/2024/03/773fc7eb7c9a.html</id>
    <published>2024-03-10T08:54:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu 中配置 <code>AppImage</code>文件，并在菜单中显示应用图标的方法；</li><li>解决启动后侧边栏两个图标问题；</li></ul><span id="more"></span><h3 id="配置方法">1. 配置方法</h3><p>这里以 marktext 软件为例： 首先需要将 <code>AppImage</code>文件的权限改为以<strong>可执行文件运行</strong>！（右键属性） 1. 解压AppImage 文件，解压后文件存放于 <code>squashfs-root</code>，将其重命名为 <code>marktext</code>。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./marktext-x86_64.AppImage --appimage-extract</span><br></pre></td></tr></table></figure></p><ol start="2" type="1"><li>在以下目录创建启动文件 <code>obsidian.desktop</code></li></ol><blockquote><p>/home/linkx/.local/share/applications</p></blockquote><p>内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Obsidian</span><br><span class="line">Comment=Aplicación de mensajería</span><br><span class="line">Exec=/home/linkx/Software/obsidian/Obsidian.AppImage #应用程序位置</span><br><span class="line">Icon=/home/linkx/Software/obsidian/squashfs-root/obsidian.png #图标位置</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Internet;</span><br></pre></td></tr></table></figure><hr /><h3 id="app-启动后侧边栏有两个图标">2. APP 启动后侧边栏有两个图标</h3><p>先打开应用，然后终端运行命令 <code>xprop WM_CLASS</code>。此时鼠标变成加号，使用鼠标点击应用窗口，得到终端输出：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xprop WM_CLASS</span></span><br><span class="line">WM_CLASS(STRING) = &quot;obsidian&quot;, &quot;obsidian&quot;</span><br></pre></td></tr></table></figure></p><p>然后修改桌面启动文件，例如<code>Obsidian.desktop</code>，添加一行内容，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Obsidian</span><br><span class="line">Comment=Aplicación de mensajería</span><br><span class="line">Exec=//home/linkx/Software/obsidian/Obsidian.AppImage</span><br><span class="line">Icon=/home/linkx/Software/obsidian/squashfs-root/obsidian.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Internet;</span><br><span class="line">StartupWMClass=obsidian #添加内容</span><br></pre></td></tr></table></figure></p><p>重启即可。</p><hr /><h3 id="参考">3. 参考</h3><ul><li><ahref="https://blog.csdn.net/halloworldd/article/details/93497608">参考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu 中配置 &lt;code&gt;AppImage&lt;/code&gt;
文件，并在菜单中显示应用图标的方法；&lt;/li&gt;
&lt;li&gt;解决启动后侧边栏两个图标问题；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>终端常用快捷键操作</title>
    <link href="http://example.com/2024/03/44a6a49c3ff4.html"/>
    <id>http://example.com/2024/03/44a6a49c3ff4.html</id>
    <published>2024-03-10T08:46:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基础操作 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctrl + a #移动到行首</span><br><span class="line">ctrl + e(end) #移动到行尾</span><br><span class="line"></span><br><span class="line">ctrl + k #删除至末尾元素</span><br><span class="line">ctrl + u #删除至开头元素</span><br><span class="line">ctrl + w(word) #剪切左边第一个单词</span><br><span class="line"></span><br><span class="line">ctrl + y(yank) #粘贴剪切的单词</span><br><span class="line"></span><br><span class="line">alt + f(forward) #往后移动一个单词</span><br><span class="line">alt + b(backward) #往前移动一个单词</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li>反向搜索 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + r（reverse） #输入文字搜索历史记录</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="comment">#right_arrow 退出反向搜索模式</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;基础操作 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctrl + a #移动到行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + e(end) #移动到行尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + k #删除至末尾元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + u #删除至开头元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + w(word) #剪切左边第一个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + y(yank) #粘贴剪切的单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alt + f(forward) #往后移动一个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alt + b(backward) #往前移动一个单词&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>压缩与解压缩文件夹</title>
    <link href="http://example.com/2024/03/6cba42028c3d.html"/>
    <id>http://example.com/2024/03/6cba42028c3d.html</id>
    <published>2024-03-10T08:44:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>.tar</code>，<code>.tar.gz</code> ，<code>.bz2</code> 和<code>.zip</code> 文件的压缩和解压方法。</li></ul><span id="more"></span><h3 id="tar-文件的压缩与解压">1. <code>.tar</code> 文件的压缩与解压</h3><p><strong>1. 压缩</strong></p><p>以 test 文件夹为例，压缩为 <code>test.tar</code> 压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：tar -vcf 打包后的文件名(xxx.tar) 需要打包的文件夹(xxx)</span></span><br><span class="line">tar -vcf test.tar test</span><br></pre></td></tr></table></figure><p><strong>2. 解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vxf 打包后的文件名(xxx.tar)</span></span><br><span class="line">tar -vxf test.tar</span><br></pre></td></tr></table></figure><hr /><h3 id="tar.gz-文件的压缩与解压">2. <code>.tar.gz</code>文件的压缩与解压</h3><p><strong>1. 压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vczf 打包压缩后的文件名(xxx.tar.gz) 需要打包的文件夹(xxx)</span></span><br><span class="line">tar -vczf test.tar.gz test</span><br></pre></td></tr></table></figure></p><p><strong>2. 解压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：tar -vxzf 打包压缩后的文件名(xxx.tar.gz)</span></span><br><span class="line">tar -vxzf test.tar.gz</span><br></pre></td></tr></table></figure></p><hr /><h3 id="bz2-文件的压缩">3. <code>.bz2</code> 文件的压缩</h3><p><strong>1. 压缩</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -z test</span><br></pre></td></tr></table></figure></p><p><strong>2. 解压</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d test.bz2</span><br></pre></td></tr></table></figure></p><h3 id="zip-文件的压缩与解压">4. <code>.zip</code> 文件的压缩与解压</h3><p><strong>1. 压缩</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式：zip 打包压缩的文件名(xxx.zip) 需要打包的文件夹(xxx)</span></span><br><span class="line">zip test.zip test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">递归处理，即将子文件夹也一并压缩</span></span><br><span class="line">zip -r test.zip test</span><br></pre></td></tr></table></figure><p><strong>2. 解压</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式： unzip xxxx.zip</span></span><br><span class="line">unzip test.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用 -d 命令解压到指定目录</span></span><br><span class="line">unzip test.zip -d /target_folder </span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.tar&lt;/code&gt;，&lt;code&gt;.tar.gz&lt;/code&gt; ，&lt;code&gt;.bz2&lt;/code&gt; 和
&lt;code&gt;.zip&lt;/code&gt; 文件的压缩和解压方法。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>添加与删除环境变量</title>
    <link href="http://example.com/2024/03/596479257e81.html"/>
    <id>http://example.com/2024/03/596479257e81.html</id>
    <published>2024-03-10T08:43:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu 中添加环境变量与删除环境变量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="comment">// 查看所有环境变量</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加环境变量</span></span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> GOPATH=/home/gopath</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除环境变量</span></span><br><span class="line"><span class="keyword">export</span> -n  GOPATH</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu 中添加环境变量与删除环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装卸载软件的各类方法</title>
    <link href="http://example.com/2024/03/d3c98baa0d11.html"/>
    <id>http://example.com/2024/03/d3c98baa0d11.html</id>
    <published>2024-03-10T08:31:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>总结ubuntu中各种安装和卸载软件的方法，包括<code>snap</code>，<code>dpkg</code> 等。</li></ul><span id="more"></span><h3 id="snap方式">1. snap方式</h3><p>对于 typora： - 安装： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install typora</span><br></pre></td></tr></table></figure> - 卸载： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap remove typora</span><br></pre></td></tr></table></figure></p><hr /><h3 id="deb-文件">2. <code>.deb</code> 文件</h3><ul><li>安装： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i [file.deb]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;总结ubuntu中各种安装和卸载软件的方法，包括
&lt;code&gt;snap&lt;/code&gt;，&lt;code&gt;dpkg&lt;/code&gt; 等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Legacy电脑安装ubuntu注意事项</title>
    <link href="http://example.com/2024/03/19dbbdee38e4.html"/>
    <id>http://example.com/2024/03/19dbbdee38e4.html</id>
    <published>2024-03-10T08:30:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<p>电脑主板的引导方式分为 legacy 引导和 UEFI引导。较新主板的引导都为UEFI，而lagacy引导需要注意以下事项： -引导方式是 legacy，需要用EASYBCD 创建引导。 -在安装ubuntu时分区的文件格式均为 ext3。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;电脑主板的引导方式分为 legacy 引导和 UEFI
引导。较新主板的引导都为UEFI，而lagacy引导需要注意以下事项： -
引导方式是 legacy，需要用EASYBCD 创建引导。 -
在安装ubuntu时分区的文件格式均为 ext3。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>删除root权限的文件夹</title>
    <link href="http://example.com/2024/03/961d865ad079.html"/>
    <id>http://example.com/2024/03/961d865ad079.html</id>
    <published>2024-03-10T08:26:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>sudo rm -rf [dirname]</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo rm -rf [dirname]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>内核查看与更改</title>
    <link href="http://example.com/2024/03/e7d261d37b2f.html"/>
    <id>http://example.com/2024/03/e7d261d37b2f.html</id>
    <published>2024-03-10T08:24:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ubuntu查看并更换系统内核的方法；</li><li>禁止在 <code>upgrade</code> 命令下更新内核的方法；</li></ul><span id="more"></span><h3 id="内核查看">1. 内核查看</h3><ul><li><p>当前内核版本 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure></p></li><li><p>已安装的所有内核 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections |grep linux-image</span><br></pre></td></tr></table></figure></p></li></ul><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20221017144927.png"alt="|500" /><figcaption aria-hidden="true">|500</figcaption></figure><hr /><h3 id="删除内核">2. 删除内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge linux-image-4.15.0-194-generic</span><br><span class="line">sudo apt autoremove #删除内核的一些依赖文件</span><br></pre></td></tr></table></figure><hr /><h3 id="安装新内核">3. 安装新内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-headers-4.15.0-47-generic linux-image-4.15.0-47-generic</span><br></pre></td></tr></table></figure><p>安装成功以后重启，在 <code>advanced options</code>中可以看到新安装的内核。</p><hr /><h3 id="禁止自动更新内核">4. 禁止自动更新内核</h3><p>禁止在使用 <code>upgrade</code>命令时自动更新内核，需要修改两个配置文件： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/apt.conf.d/10periodic</span><br><span class="line">sudo gedit /etc/apt/apt.conf.d/20auto-upgrades</span><br></pre></td></tr></table></figure></p><p>将其内容修改为： <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">APT::Periodic::Update-Package-Lists &quot;0&quot;;</span><br><span class="line">APT::Periodic::Download-Upgradeable-Packages &quot;0&quot;;</span><br><span class="line">APT::Periodic::AutocleanInterval &quot;0&quot;;</span><br><span class="line">APT::Periodic::Unattended-Upgrade &quot;0&quot;;</span><br></pre></td></tr></table></figure></p><p>若需要打开自动更新配置文件，则将内容更改为： <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">APT::Periodic::Update-Package-Lists &quot;2&quot;;</span><br><span class="line">APT::Periodic::Download-Upgradeable-Packages &quot;1&quot;;</span><br><span class="line">APT::Periodic::AutocleanInterval &quot;0&quot;;</span><br><span class="line">APT::Periodic::Unattended-Upgrade &quot;1&quot;;</span><br></pre></td></tr></table></figure></p><hr /><h3 id="参考">5. 参考</h3><ul><li><ahref="https://blog.csdn.net/davidhzq/article/details/102651588?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-102651588-blog-121861359.pc_relevant_multi_platform_whitelistv4&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=2">禁止自动更新内核</a></li><li><a href="https://javaforall.cn/172312.html">安装新内核</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ubuntu查看并更换系统内核的方法；&lt;/li&gt;
&lt;li&gt;禁止在 &lt;code&gt;upgrade&lt;/code&gt; 命令下更新内核的方法；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>创建Python虚拟环境</title>
    <link href="http://example.com/2024/03/1b808778e65d.html"/>
    <id>http://example.com/2024/03/1b808778e65d.html</id>
    <published>2024-03-10T08:20:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用 <code>virtualenv</code> 创建Python虚拟环境的基本配置方法；</li><li>不同虚拟环境设置不同Python 版本的方法；</li></ul><span id="more"></span><h3 id="基础设置">1. 基础设置</h3><ul><li><p>下载功能包 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install virtualenv </span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure></p></li><li><p>创建存放虚拟路径的文件夹 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir $HOME/.virtualenvs</span><br></pre></td></tr></table></figure></p></li><li><p>添加环境变量，注意因为是用 pip3 下载的功能包，则需要指定使用python3 运行。打开 <code>.bashrc</code> 文件，并添加以下内容：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv</span><br><span class="line"></span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p></li><li><p>使得环境配置生效 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure></p></li><li><p>创建虚拟环境 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv [虚拟环境] # 默认是在 python2 中</span><br><span class="line">mkvirtualenv -p python3 [虚拟环境名称] #python3 版本</span><br></pre></td></tr></table></figure></p></li><li><p>查看所有创建的虚拟环境 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p></li><li><p>进入某一虚拟环境 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon [虚拟环境名]</span><br></pre></td></tr></table></figure></p></li><li><p>退出虚拟环境 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p></li><li><p>删除虚拟环境</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须先退出虚拟环境再进行删除</span> </span><br><span class="line">rmvirtualenv [虚拟环境名称]</span><br></pre></td></tr></table></figure><hr /><h3 id="创建不同-python-版本的虚拟环境">2. 创建不同 python版本的虚拟环境</h3><p>上述配置中使用的解释器为系统python，若想在虚拟环境中使用不同的python解释器，需要下载安装自己所需python版本，然后在创建虚拟环境时指定python。 - 自定义下载安装 python <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</span><br><span class="line">tax -xzvf Python-3.9.0.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget -P ~/Downloads https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tar.xz</span></span><br><span class="line"></span><br><span class="line">./configure </span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义python安装路径，不要和系统混淆</span></span><br><span class="line">make install DESTDIR=~/python_version/python3.9.0_build </span><br></pre></td></tr></table></figure> - 创建 virtualenv虚拟环境时指定python解释器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p ~/python_version/python3.9.0_build/python3.9 [虚拟环境名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;virtualenv&lt;/code&gt; 创建Python虚拟环境的基本配置方法；&lt;/li&gt;
&lt;li&gt;不同虚拟环境设置不同Python 版本的方法；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>查看文件及文件夹大小</title>
    <link href="http://example.com/2024/03/1875b8f30cd2.html"/>
    <id>http://example.com/2024/03/1875b8f30cd2.html</id>
    <published>2024-03-10T08:20:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>linux 中查看文件以及文件夹大小的各项命令，包括<code>ls</code>，<code>ll</code> 和 <code>du</code>。</li></ul><span id="more"></span><h3 id="ls-命令">1. ls 命令</h3><ul><li><p><code>ls</code> ： 查看当前目录下各文件</p></li><li><p><code>ls -l</code>： 查看各文件详细信息，第一列代表文件属性，-为普通文件，d 为文件夹，l 为软连接。 注意 <code>autoscan*</code> 后的<code>*</code> 表示有可执行权限。 <imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230309134455.png"alt="|500" /></p></li><li><p><code>ls -lh</code> : 以 KB 或 MB的形式显示文件大小，注意对于文件夹，这里的数值并不是这个文件夹下所有文件大小，只是这个文件夹符所占大小。查看文件夹大小使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh 文件夹 </span><br></pre></td></tr></table></figure></p></li></ul><hr /><h3 id="ll-命令">2. ll 命令</h3><p><code>ll</code> 命令实际就是 <code>ls -l</code>的简写，所以有以下等效： - <code>ll -s</code> -&gt; <code>ls -ls</code>- <code>ll -h</code> -&gt; <code>ls -lh</code></p><hr /><h3 id="du-命令">3. du 命令</h3><ul><li><p>查看文件夹下各个文件夹及其本身大小 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure></p></li><li><p>查看本文件夹总大小 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh</span><br></pre></td></tr></table></figure></p></li><li><p>查看本文件夹下某个子文件夹大小 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh 文件夹名</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;linux 中查看文件以及文件夹大小的各项命令，包括
&lt;code&gt;ls&lt;/code&gt;，&lt;code&gt;ll&lt;/code&gt; 和 &lt;code&gt;du&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    <category term="linux笔记" scheme="http://example.com/categories/Ubuntu/linux%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>KKT条件</title>
    <link href="http://example.com/2024/03/db850e69690f.html"/>
    <id>http://example.com/2024/03/db850e69690f.html</id>
    <published>2024-03-09T16:06:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>等式约束的优化问题：使用拉格朗日乘数法构建拉格朗日函数，利用求取极值的必要性，转换为无约束优化问题，可以使用<a href="/2024/03/57eb35381a43.html" title="梯度下降法">梯度下降法</a>、<a href="/2024/03/c814794462ec.html" title="牛顿法">牛顿法</a>，<a href="/2024/03/528ef78b9929.html" title="共轭梯度法">共轭梯度法</a>等方法进行迭代求解。</p></li><li><p>带有不等式约束的优化问题：构建广义拉格朗日函数，然后使用KKT条件进行求解。</p></li></ul><span id="more"></span><hr /><h3 id="基本原理">1. 基本原理</h3><p>对于带约束的优化问题（不一定是凸问题）： <spanclass="math display">\[\begin{array}{ll}\min &amp; f_0(\boldsymbol{x}), \boldsymbol{x} \in \mathbb{R}^n \\&amp; f_i(\boldsymbol{x}) \leq 0 \text {, 其中 } \mathrm{i}=1,2,3 \ldots\mathrm{m} \\\text { s.t. } &amp; h_i(\boldsymbol{x})=0 \text {, 其中 }\mathrm{i}=1,2,3 \ldots q\end{array}\]</span></p><h4 id="首先构建拉格朗日函数将原问题进行等价转换">1.1首先构建拉格朗日函数，将原问题进行等价转换：</h4><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914115357.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>问题：为什么拉格朗日乘子<span class="math inline">\(\lambda \geq0\)</span>？ 答：为了使得原函数 <spanclass="math inline">\(f_{0}(x)\)</span> 等价为极大的拉格朗日函数。也就是上面的当 x在可行域和不在可行域时需要满足的条件，从而将原问题等价为极小极大拉格朗日问题。</p><h4 id="将原问题转换为对偶问题就是最大最小过程进行交换">1.2将原问题转换为对偶问题，就是最大最小过程进行交换：</h4><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914115857.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>这里，对偶问题进行进一步转化： <span class="math display">\[\begin{array}{ll}对偶问题: &amp;\max _{\lambda, v} L(x,\lambda, v) \\\text { s.t. } &amp; \nabla_{\boldsymbol{x}} L(\boldsymbol{x},\boldsymbol{\lambda}, \boldsymbol{v})=\mathbf{0} \\&amp; \boldsymbol{\lambda} \geq \mathbf{0}\end{array}\]</span></p><p>注意对偶函数 <spanclass="math inline">\(g(\lambda,v)\)</span>的变量为 <spanclass="math inline">\(\lambda,v\)</span> ，然后分析对偶函数： - <spanclass="math inline">\(g(\lambda,v)\)</span>是关于变量的线性函数，因此既是凸函数也是凹函数； - 对偶问题可行域为<span class="math inline">\(\lambda \geq 0\)</span>，是半空间，因此为凸空间。</p><p>所以无论原问题是不是凸问题，对偶问题一定是凸问题。 <imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914121015.png"alt="image.png" /></p><h4 id="对偶问题于原问题之间解的关系">1.3对偶问题于原问题之间解的关系</h4><ul><li><strong>对偶问题的解是原问题解的下界，这是弱对偶关系，即 <spanclass="math inline">\(P* \geq D*\)</span></strong>。</li><li><strong>对偶问题的解是原问题的解，这是强对偶关系，即 <spanclass="math inline">\(P* = D*\)</span></strong></li></ul><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914121450.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h4 id="原始问题要是一个强对偶问题">1.4 原始问题要是一个强对偶问题</h4><p>需要满足： - 原始问题为凸问题； - 满足 Slack 条件； <imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914122308.png"alt="image.png" /></p><h4 id="最终如何求解一个带约束的凸优化问题">1.5最终，如何求解一个带约束的凸优化问题</h4><p>使用 KKT 条件求解，KKT条件是原始问题为强对偶问题的<strong>必要条件</strong>，也就是说原始问题如果是强对偶，那么一定满足KKT条件，但满足KKT条件，不一定是强对偶。</p><p>互补松弛是构建拉格朗日函数时需要满足的，就是松弛条件和紧致条件的特性的统一表示。</p><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914122648.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><hr /><h3 id="补充">2. 补充</h3><ul><li>松弛条件和紧致条件</li></ul><figure><imgsrc="https://images-1310554886.cos.ap-shanghai.myqcloud.com/markdown/20230914114514.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><hr /><h3 id="参考">3. 参考</h3><ul><li><ahref="https://zhuanlan.zhihu.com/p/38163970">KKT条件简要说明</a></li><li><ahref="https://brezezee.github.io/2019/08/02/ML/SVM/Lagrange_duality/">拉格朗日对偶性</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;等式约束的优化问题：使用拉格朗日乘数法构建拉格朗日函数，利用求取极值的必要性，转换为无约束优化问题，可以使用&lt;a href=&quot;/2024/03/57eb35381a43.html&quot; title=&quot;梯度下降法&quot;&gt;梯度下降法&lt;/a&gt;、&lt;a href=&quot;/2024/03/c814794462ec.html&quot; title=&quot;牛顿法&quot;&gt;牛顿法&lt;/a&gt;，&lt;a href=&quot;/2024/03/528ef78b9929.html&quot; title=&quot;共轭梯度法&quot;&gt;共轭梯度法&lt;/a&gt;等方法进行迭代求解。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带有不等式约束的优化问题：构建广义拉格朗日函数，然后使用KKT条件进行求解。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="最优化方法" scheme="http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>梯度下降法</title>
    <link href="http://example.com/2024/03/57eb35381a43.html"/>
    <id>http://example.com/2024/03/57eb35381a43.html</id>
    <published>2024-03-09T16:06:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>求解无约束优化问题的经典方法；</li><li>步长（学习率）通过人为设定；</li></ul><span id="more"></span><h3 id="基本原理">1. 基本原理</h3><p>对于无约束优化问题： <span class="math display">\[min \quad f(x)\]</span> 将目标函数在 <span class="math inline">\(x_{k}\)</span>处进行一阶泰勒展开 <span class="math display">\[\begin{aligned}f(x_{k+1}) &amp;= f(x_{k}) + g(x_{k})(x_{k+1} - x_{k}) \\g(x_{k}) &amp;= f&#39;(x_{k})\end{aligned}\]</span></p><p>梯度下降法的目标是希望 <span class="math inline">\(f(x)\)</span>在当前所在位置向下降量最大的方向扩展，即： <span class="math display">\[\begin{aligned}f(x_{k+1}) - f(x_{k}) &amp;= g(x_{k}) \cdot \alpha \vec{v} \\&amp; = \alpha \times ||g(x_{k})|| \times ||\vec{v}|| \times cos(\theta)\end{aligned}\]</span> 所以要使得 <span class="math inline">\(f(x_{k+1}) -f(x_{k})\)</span> 的绝对值最大，并且为负，需要 <spanclass="math inline">\(cos(\theta) = -1\)</span>，即 <spanclass="math inline">\(\vec{v} = -g(x_{k})\)</span>，所以有： <spanclass="math display">\[x_{k+1} = x_{k} - \alpha \times g(x_{k})\]</span></p><hr /><h3 id="局限性">2. 局限性</h3><ul><li>在靠近极值点时更新步长会变得很小，由此造成迭代次数过大。</li></ul><hr /><h3 id="参考">3. 参考</h3><ul><li><ahref="https://zhuanlan.zhihu.com/p/99477577">梯度下降算法的数学推导_</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;求解无约束优化问题的经典方法；&lt;/li&gt;
&lt;li&gt;步长（学习率）通过人为设定；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="最优化方法" scheme="http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>牛顿法</title>
    <link href="http://example.com/2024/03/c814794462ec.html"/>
    <id>http://example.com/2024/03/c814794462ec.html</id>
    <published>2024-03-09T16:05:00.000Z</published>
    <updated>2024-03-11T00:51:43.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>求解无约束优化问题的经典方法；</li><li>需要目标函数的二阶导数（海塞矩阵）获取步长；</li></ul><span id="more"></span><h3 id="基本原理">1. 基本原理</h3><p>同样对于无约束优化问题： <span class="math display">\[min \quad f(x)\]</span></p><p>我们求其导数的零点，就可以得到函数极值，并且若 <spanclass="math inline">\(f&#39;&#39;(x_{k})&gt;0\)</span> ，那么 <spanclass="math inline">\(x_{k}\)</span> 就是函数极小值点。</p><ol type="1"><li>将目标函数在 <span class="math inline">\(x_{k}\)</span>处进行二阶泰勒展开： <span class="math display">\[f(x_{k+1}) = f(x_{k}) + f&#39;(x_{k})(x_{k+1} - x_{k}) +\frac{1}{2}f&#39;&#39;(x_{k})(x_{k+1}-x_{k})^{2}\]</span></li><li>求一阶导数零点，即 <span class="math display">\[\begin{aligned}f&#39;(x_{k}) + f&#39;&#39;(x_{k})(x_{k+1}-x_{k}) &amp;=f(x_{k+1})&#39;  \\&amp; = 0 \\\end{aligned}\]</span></li><li>得到递增方向： <span class="math display">\[\begin{aligned}x_{k+1} &amp;= x_{k} - (f&#39;&#39;(x_{k}))^{-1}f&#39;(x_{k}) \\&amp;= x_{k} - (f&#39;&#39;(x_{k}))^{-1}g(x_{k})\end{aligned}\]</span></li></ol><hr /><h3 id="对比">2. 对比<a href="/2024/03/57eb35381a43.html" title="梯度下降法">梯度下降法</a></h3><ul><li>梯度下降法： <span class="math display">\[x_{k+1} = x_{k} - \alpha \times g(x_{k})\]</span></li><li>牛顿法： <span class="math display">\[x_{k+1} = x_{k} - (f&#39;&#39;(x_{k}))^{-1}g(x_{k})\]</span></li></ul><p>所以牛顿法其实是通过海塞矩阵求取了一个步长，其迭代速度相比梯度下降法会快很多，但是海塞矩阵的求解与求逆却相对要难很多。</p><hr /><h3 id="局限性">3. 局限性</h3><ul><li>要求给定的方程需要二阶可导</li><li>非凸函数的海塞矩阵不一定有逆</li><li>数据较大的时候，海塞矩阵的计算量偏大</li></ul><hr /><h3 id="参考">4. 参考</h3><ul><li><ahref="https://zhuanlan.zhihu.com/p/162901829">牛顿法、高斯—牛顿法（Gauss–Newton）和其他拟牛顿法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;求解无约束优化问题的经典方法；&lt;/li&gt;
&lt;li&gt;需要目标函数的二阶导数（海塞矩阵）获取步长；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="最优化方法" scheme="http://example.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
